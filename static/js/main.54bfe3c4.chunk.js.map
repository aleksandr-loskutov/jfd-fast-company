{"version":3,"sources":["reportWebVitals.js","app/utils/validator.js","app/components/common/form/textField.jsx","app/components/common/form/selectField.jsx","app/components/common/form/radio.Field.jsx","app/components/common/form/multiSelectField.jsx","app/components/common/backButton.jsx","app/services/localStorage.service.js","app/services/auth.service.js","app/services/http.service.js","app/services/qaulity.service.js","app/utils/isOutdated.js","app/store/qualities.js","app/services/profession.service.js","app/store/professions.js","app/services/user.service.js","app/utils/randomInt.js","app/utils/history.js","app/utils/generateAuthError.js","app/store/users.js","app/components/page/editUserPage/index.js","app/components/page/editUserPage/editUserPage.jsx","app/components/ui/userCard.jsx","app/components/ui/qualities/quality.jsx","app/components/ui/qualities/index.js","app/components/ui/qualities/qualitiesList.jsx","app/components/ui/qualitiesCard.jsx","app/components/ui/meetingsCard.jsx","app/utils/displayDate.js","app/components/common/comments/comment.jsx","app/components/common/comments/commentsList.jsx","app/components/common/form/textAreaField.jsx","app/components/common/comments/addCommentForm.jsx","app/components/common/comments/index.js","app/services/commentService.js","app/store/comments.js","app/components/ui/comments.jsx","app/components/page/userPage/index.js","app/components/page/userPage/userPage.jsx","app/components/common/pagination.jsx","app/components/common/groupList.jsx","app/components/ui/searchStatus.jsx","app/components/common/bookmark.jsx","app/components/common/table/tableBody.jsx","app/components/common/table/tableHeader.jsx","app/components/common/table/index.js","app/components/common/table/table.jsx","app/components/ui/profession.jsx","app/components/ui/usersTable.jsx","app/components/page/usersListPage/index.js","app/components/page/usersListPage/usersListPage.jsx","app/utils/paginate.js","app/components/ui/hoc/usersLoader.jsx","app/layouts/users.jsx","app/components/common/form/checkBoxField.jsx","app/components/ui/loginForm.jsx","app/components/ui/registerForm.jsx","app/layouts/login.jsx","app/layouts/main.jsx","app/components/ui/navProfile.jsx","app/components/ui/navBar.jsx","app/components/common/protectedRoute.jsx","app/layouts/logOut.jsx","app/components/ui/hoc/appLoader.jsx","app/App.js","app/store/createStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","validator","data","config","errors","validate","validateMethod","statusValidate","trim","test","length","value","message","fieldName","error","TextField","label","type","name","onChange","useState","showPassword","setShowPassword","className","htmlFor","id","target","onClick","prevState","defaultProps","SelectField","defaultOption","options","optionsArray","Array","isArray","Object","keys","map","optionName","_id","disabled","option","RadioField","handleChange","checked","MultiSelectField","defaultValue","isMulti","closeMenuOnSelect","classNamePrefix","BackHistoryButton","history","useHistory","goBack","TOKEN_KEY","REFRESH_KEY","EXPIRES_KEY","USERID_KEY","localStorageService","setTokens","refreshToken","idToken","localId","expiresIn","expiresDate","Date","getTime","localStorage","setItem","getAccessToken","getItem","getRefreshToken","getTokenExpiresDate","getUserId","removeAuthData","removeItem","httpAuth","axios","create","baseURL","params","key","process","REACT_APP_FIREBASE_KEY","authService","register","a","email","password","post","returnSecureToken","login","refresh","grant_type","refresh_token","http","configFile","apiEndpoint","interceptors","request","use","isFireBase","containSlash","url","slice","now","id_token","expires_in","user_id","accessToken","auth","Promise","reject","response","res","content","status","console","log","toast","httpService","get","put","delete","patch","qualityService","fetchAll","isOutdated","date","qualitiesSlice","createSlice","initialState","entities","isLoading","lastFetch","reducers","qualitiesRequested","state","qualitiesReceved","action","payload","qualitiesRequestFiled","qualitiesReducer","reducer","actions","loadQualitiesList","dispatch","getState","qualities","professionService","req","professionsSlice","professionsRequested","professionsReceved","professionsRequestFiled","professionsReducer","userEndpoint","userService","getCurrentUser","update","randomInt","min","max","Math","floor","random","createBrowserHistory","generateAuthError","userId","isLoggedIn","dataLoaded","usersSlice","usersRequested","usersReceved","usersRequestFiled","authRequestSuccess","authRequestFailed","userCreated","push","userUpdated","findIndex","u","userBookmarkUpdated","userIndex","bookmarks","userBookmarkUpdateFailed","userLoggedOut","authRequested","usersReducer","createAction","userCreateRequested","userUpdateRequested","userBookmarkUpdateRequested","createUpdateFailed","createUserFailed","createUser","updateBookmarks","loadUsersList","getUserById","users","find","getDataStatus","EditUserPage","useDispatch","setIsLoading","setData","currentUser","useSelector","qualitiesLoading","qualitiesList","q","professions","professionLoading","professionsList","p","setErrors","transformData","qualitiesIds","qualitiesArray","qualId","quality","getQualitiesListByIds","qual","useEffect","validatorConfog","isRequired","isEmail","isValid","onSubmit","e","preventDefault","profession","sex","UserCard","user","location","pathname","src","image","width","role","rate","Quality","color","Qualities","QualitiesCard","MeetingsCard","displayDate","parseInt","dateNow","getFullYear","getDay","getHours","minutesDif","getMinutes","toLocaleString","month","getMonth","getDate","Comment","created","created_at","onRemove","currentUserId","alt","height","CommentsList","comments","comment","TextAreaField","AddCommentForm","commentEndpoint","commentService","createComment","getComments","pageId","orderBy","equalTo","removeComment","commentId","commentsSlice","commentsRequested","commentsReceved","commentsRequestFiled","commentAdded","commentAddFailed","commentDeleted","filter","c","commentDeleteFailed","commentsReducer","commentRequestAdd","commentRequestDelete","Comments","useParams","loadCommentsList","sortedComments","nanoid","UserPage","completedMeetings","Pagination","itemsCount","pageSize","onPageChange","currentPage","pagesCount","ceil","pages","_","range","page","GroupList","items","valueProperty","contentProperty","onItemSelect","selectedItem","item","SearchStatus","number","lastOne","Number","toString","indexOf","renderPhrase","BookMark","rest","TableBody","columns","renderContent","column","component","path","TableHeader","onSort","selectedSort","rendeSortArrow","currentPath","order","undefined","scope","Table","children","Profession","prof","getProfessionById","UserTable","onToggleBookMark","currentUserBookmarks","to","bookmark","includes","UsersListPage","professionsLoading","setCurrentPage","searchQuery","setSearchQuery","selectedProf","setSelectedProf","sortBy","setSortBy","filteredUsers","toLowerCase","count","usersCrop","pageNumber","startIndex","take","paginate","placeholder","b","pageIndex","UsersLoader","dataStatus","propTypes","PropTypes","oneOfType","arrayOf","node","Users","edit","CheckBoxField","LoginForm","stayOn","loginError","redirect","from","code","errorMessage","RegisterForm","licence","isCapitalSymbol","isContainDigit","newData","substring","signUp","Login","formType","setFormType","toggleFormType","Main","NavProfile","isOpen","setOpen","NavBar","aria-current","ProtectedRoute","Component","render","props","LogOut","AppLoader","usersStatusLoading","App","exact","require","combineReducers","configureStore","rootReducer","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"gKAceA,G,MAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,6CCRjB,SAASQ,EAAUC,EAAMC,GAC5B,IAAMC,EAAS,GACf,SAASC,EAASC,EAAgBJ,EAAMC,GACpC,IAAII,EACJ,OAAQD,GACJ,IAAK,aAEGC,EADgB,mBAATL,GACWA,EAEe,KAAhBA,EAAKM,OAE1B,MAEJ,IAAK,UAEDD,GADoB,kBACUE,KAAKP,GACnC,MAEJ,IAAK,kBAEDK,GADsB,UACUE,KAAKP,GACrC,MAEJ,IAAK,iBAEDK,GADoB,OACUE,KAAKP,GACnC,MAEJ,IAAK,MACDK,EAAiBL,EAAKQ,OAASP,EAAOQ,MAM9C,GAAIJ,EAAgB,OAAOJ,EAAOS,QAEtC,IAAK,IAAMC,KAAaX,EACpB,IAAK,IAAMI,KAAkBH,EAAOU,GAAY,CAC5C,IAAMC,EAAQT,EACVC,EACAJ,EAAKW,GACLV,EAAOU,GAAWP,IAElBQ,IAAUV,EAAOS,KACjBT,EAAOS,GAAaC,GAIhC,OAAOV,E,WC9CLW,EAAY,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,KAAMP,EAA6B,EAA7BA,MAAOQ,EAAsB,EAAtBA,SAAUL,EAAY,EAAZA,MAAY,EACzBM,oBAAS,GADgB,mBAC1DC,EAD0D,KAC5CC,EAD4C,KAYjE,OACI,sBAAKC,UAAU,OAAf,UACI,wBAAOC,QAASN,EAAhB,cAAwBF,KACxB,sBAAKO,UAAU,6BAAf,UACI,uBACIN,KAAMI,EAAe,OAASJ,EAC9BQ,GAAIP,EACJA,KAAMA,EACNP,MAAOA,EACPQ,SAlBK,SAAC,GAAgB,IAAdO,EAAa,EAAbA,OACpBP,EAAS,CAAED,KAAMQ,EAAOR,KAAMP,MAAOe,EAAOf,SAkBhCY,UAfL,gBAAkBT,EAAQ,cAAgB,MAkB/B,aAATG,GACG,wBACIM,UAAU,4BACVN,KAAK,SACLU,QApBO,WACvBL,GAAgB,SAACM,GAAD,OAAgBA,MAgBpB,SAKI,mBACIL,UACI,aAAeF,EAAe,SAAW,QAKxDP,GAAS,qBAAKS,UAAU,oBAAf,SAAoCT,WAK9DC,EAAUc,aAAe,CACrBZ,KAAM,QAWKF,QCKAe,EA5DK,SAAC,GAQd,IAPHd,EAOE,EAPFA,MACAL,EAME,EANFA,MACAQ,EAKE,EALFA,SACAY,EAIE,EAJFA,cACAC,EAGE,EAHFA,QACAlB,EAEE,EAFFA,MACAI,EACE,EADFA,KASMe,EACDC,MAAMC,QAAQH,IAA+B,kBAAZA,EAK5BA,EAJAI,OAAOC,KAAKL,GAASM,KAAI,SAACC,GAAD,MAAiB,CACtCrB,KAAMc,EAAQO,GAAYrB,KAC1BP,MAAOqB,EAAQO,GAAYC,QAIzC,OACI,sBAAKjB,UAAU,OAAf,UACI,uBAAOC,QAAQ,qBAAqBD,UAAU,aAA9C,SACKP,IAEL,yBACIO,UAjBD,eAAiBT,EAAQ,cAAgB,IAkBxCW,GAAG,qBACHP,KAAMA,EACNP,MAAOA,EACPQ,SAzBS,SAAC,GAAgB,IAAdO,EAAa,EAAbA,OACpBP,EAAS,CAAED,KAAMQ,EAAOR,KAAMP,MAAOe,EAAOf,SAmBxC,UAOI,wBAAQ8B,UAAQ,EAAC9B,MAAM,GAAvB,SACKoB,IAEJE,GACGA,EAAaK,KAAI,SAACI,GAAD,OACb,wBAAQ/B,MAAO+B,EAAO/B,MAAtB,SACK+B,EAAO1B,OADsB0B,EAAO/B,aAKpDG,GAAS,qBAAKS,UAAU,mBAAf,SAAmCT,QCJ1C6B,EA3CI,SAAC,GAA+C,IAA7CX,EAA4C,EAA5CA,QAASd,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,SAAUR,EAAmB,EAAnBA,MAAOK,EAAY,EAAZA,MAC5C4B,EAAe,SAAC,GAAgB,IAAdlB,EAAa,EAAbA,OACpBP,EAAS,CAAED,KAAMQ,EAAOR,KAAMP,MAAOe,EAAOf,SAEhD,OACI,sBAAKY,UAAU,OAAf,UACI,uBAAOA,UAAU,aAAjB,SAA+BP,IAC/B,8BACKgB,EAAQM,KAAI,SAACI,GAAD,OACT,sBAEInB,UAAU,+BAFd,UAII,uBACIA,UAAU,mBACVN,KAAK,QACLC,KAAMA,EACNO,GAAIiB,EAAOxB,KAAO,IAAMwB,EAAO/B,MAC/BkC,QAASH,EAAO/B,QAAUA,EAC1BA,MAAO+B,EAAO/B,MACdQ,SAAUyB,IAEd,uBACIrB,UAAU,mBACVC,QAASkB,EAAOxB,KAAO,IAAMwB,EAAO/B,MAFxC,SAIK+B,EAAOxB,SAhBPwB,EAAOxB,KAAO,IAAMwB,EAAO/B,gB,QC4BzCmC,EApCU,SAAC,GAAsD,IAApDd,EAAmD,EAAnDA,QAASb,EAA0C,EAA1CA,SAAUD,EAAgC,EAAhCA,KAAMF,EAA0B,EAA1BA,MAAO+B,EAAmB,EAAnBA,aAClDd,EACDC,MAAMC,QAAQH,IAA+B,kBAAZA,EAK5BA,EAJAI,OAAOC,KAAKL,GAASM,KAAI,SAACC,GAAD,MAAiB,CACtCvB,MAAOgB,EAAQO,GAAYrB,KAC3BP,MAAOqB,EAAQO,GAAYC,QAOzC,OACI,sBAAKjB,UAAU,OAAf,UACI,uBAAOA,UAAU,aAAjB,SAA+BP,IAC/B,cAAC,IAAD,CACIgC,SAAO,EACPC,mBAAmB,EACnBF,aAAcA,EACdf,QAASC,EACTV,UAAU,qBACV2B,gBAAgB,SAChB/B,SAbS,SAACR,GAClBQ,EAAS,CAAED,KAAMA,EAAMP,WAafO,KAAMA,QCfPiC,EAVW,WACtB,IAAMC,EAAUC,cAChB,OACI,yBAAQ9B,UAAU,kBAAkBI,QAAS,kBAAMyB,EAAQE,UAA3D,UACI,mBAAG/B,UAAU,qBADjB,qC,uECLFgC,EAAY,YACZC,EAAc,oBACdC,EAAc,cACdC,EAAa,gBAiCnB,IAQeC,EARa,CACxBC,UAhCG,YAKH,IAJAC,EAID,EAJCA,aACAC,EAGD,EAHCA,QACAC,EAED,EAFCA,QAED,IADCC,iBACD,MADa,KACb,EACOC,GAAc,IAAIC,MAAOC,UAAwB,IAAZH,EAC3CI,aAAaC,QAAQX,EAAYK,GACjCK,aAAaC,QAAQd,EAAWO,GAChCM,aAAaC,QAAQb,EAAaK,GAClCO,aAAaC,QAAQZ,EAAaQ,IAuBlCK,eArBG,WACH,OAAOF,aAAaG,QAAQhB,IAqB5BiB,gBAnBG,WACH,OAAOJ,aAAaG,QAAQf,IAmB5BiB,oBAVG,WACH,OAAOL,aAAaG,QAAQd,IAU5BiB,UARG,WACH,OAAON,aAAaG,QAAQb,IAQ5BiB,eAnBG,WACHP,aAAaQ,WAAWlB,GACxBU,aAAaQ,WAAWrB,GACxBa,aAAaQ,WAAWpB,GACxBY,aAAaQ,WAAWnB,KCxBtBoB,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,6CACTC,OAAQ,CACJC,IAAKC,mIAAYC,0BA6BVC,EAzBK,CAChBC,SAAS,WAAD,4BAAE,mCAAAC,EAAA,6DAASC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAhB,SACiBZ,EAASa,KAAT,kBAAiC,CACpDF,QACAC,WACAE,mBAAmB,IAJjB,uBACEzF,EADF,EACEA,KADF,kBAMCA,GAND,2CAAF,mDAAC,GAQT0F,MAAM,WAAD,4BAAE,mCAAAL,EAAA,6DAASC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAhB,SACoBZ,EAASa,KAAT,8BAA6C,CAChEF,QACAC,WACAE,mBAAmB,IAJpB,uBACKzF,EADL,EACKA,KADL,kBAMIA,GANJ,2CAAF,mDAAC,GAQN2F,QAAQ,WAAD,4BAAE,8BAAAN,EAAA,sEACkBV,EAASa,KAAK,QAAS,CAC1CI,WAAY,gBACZC,cAAepC,EAAoBa,oBAHlC,uBACGtE,EADH,EACGA,KADH,kBAKEA,GALF,2CAAF,kDAAC,ICpBN8F,EAAOlB,IAAMC,OAAO,CACtBC,QAASiB,EAAWC,cAGxBF,EAAKG,aAAaC,QAAQC,IAA1B,uCACI,WAAgBlG,GAAhB,qBAAAoF,EAAA,0DACQU,EAAWK,WADnB,oBAEcC,EAAe,QAAQ9F,KAAKN,EAAOqG,KACzCrG,EAAOqG,KACFD,EAAepG,EAAOqG,IAAIC,MAAM,GAAI,GAAKtG,EAAOqG,KAAO,QACtDvC,EAAcN,EAAoBc,wBACnBd,EAAoBa,mBACrBP,EAAcC,KAAKwC,OAP/C,iCAQ+BrB,EAAYQ,UAR3C,OAQkB3F,EARlB,OAUYyD,EAAoBC,UAAU,CAC1BC,aAAc3D,EAAK6F,cACnBjC,QAAS5D,EAAKyG,SACd3C,UAAW9D,EAAK0G,WAChB7C,QAAS7D,EAAK2G,UAd9B,SAiBcC,EAAcnD,EAAoBW,oBAEpCnE,EAAO8E,OAAP,2BAAqB9E,EAAO8E,QAA5B,IAAoC8B,KAAMD,KAnBtD,iCAsBW3G,GAtBX,4CADJ,uDAyBI,SAAUW,GACN,OAAOkG,QAAQC,OAAOnG,MAU9BkF,EAAKG,aAAae,SAASb,KACvB,SAACc,GARL,IAAsBjH,EAYd,OAHI+F,EAAWK,aACXa,EAAIjH,KAAO,CAAEkH,SAVHlH,EAUyBiH,EAAIjH,KATxCA,IAASA,EAAKsC,IACfJ,OAAOC,KAAKnC,GAAMoC,KAAI,SAAC4C,GAAD,sBACfhF,EAAKgF,OAEZhF,KAOKiH,KAEX,SAAUrG,GAUN,OARIA,EAAMoG,UACNpG,EAAMoG,SAASG,QAAU,KACzBvG,EAAMoG,SAASG,OAAS,MAGxBC,QAAQC,IAAIzG,GACZ0G,IAAM1G,MAAM,qCAETkG,QAAQC,OAAOnG,MAG9B,IAOe2G,EAPK,CAChBC,IAAK1B,EAAK0B,IACVhC,KAAMM,EAAKN,KACXiC,IAAK3B,EAAK2B,IACVC,OAAQ5B,EAAK4B,OACbC,MAAO7B,EAAK6B,OC/DDC,EANQ,CACnBC,SAAS,WAAD,4BAAE,8BAAAxC,EAAA,sEACiBkC,EAAYC,IAJnB,YAGV,uBACExH,EADF,EACEA,KADF,kBAECA,GAFD,2CAAF,kDAAC,ICEE8H,MANf,SAAoBC,GAChB,OAAI/D,KAAKwC,MAAQuB,EAAO,KCGtBC,EAAiBC,sBAAY,CAC/BjH,KAAM,YACNkH,aAAc,CACVC,SAAU,KACVC,WAAW,EACXxH,MAAO,KACPyH,UAAW,MAEfC,SAAU,CACNC,mBAAoB,SAACC,GACjBA,EAAMJ,WAAY,GAEtBK,iBAAkB,SAACD,EAAOE,GACtBF,EAAML,SAAWO,EAAOC,QACxBH,EAAMH,UAAYrE,KAAKwC,MACvBgC,EAAMJ,WAAY,GAEtBQ,sBAAuB,SAACJ,EAAOE,GAC3BF,EAAM5H,MAAQ8H,EAAOC,QACrBH,EAAMJ,WAAY,MAKbS,EAA8Bb,EAAvCc,QAA2BC,EAAYf,EAAZe,QAC3BR,EAAgEQ,EAAhER,mBAAoBE,EAA4CM,EAA5CN,iBAAkBG,EAA0BG,EAA1BH,sBAEjCI,EAAoB,yDAAM,WAAOC,EAAUC,GAAjB,mBAAA7D,EAAA,yDAC3BgD,EAAca,IAAWC,UAAzBd,WACJP,EAAWO,GAFoB,wBAG/BY,EAASV,KAHsB,kBAKDX,EAAeC,WALd,gBAKnBX,EALmB,EAKnBA,QACR+B,EAASR,EAAiBvB,IANC,kDAQ3B+B,EAASL,EAAsB,KAAMlI,UARV,0DAAN,yDAgClBmI,ICrDAO,EANW,CACtB5B,IAAI,WAAD,4BAAE,4BAAAnC,EAAA,sEACiBkC,EAAYC,IAJX,eAGlB,cACK6B,EADL,yBAEMA,EAAIrJ,MAFV,2CAAF,kDAAC,ICFFsJ,EAAmBrB,sBAAY,CACjCjH,KAAM,cACNkH,aAAc,CACVC,SAAU,KACVC,WAAW,EACXxH,MAAO,KACPyH,UAAW,MAEfC,SAAU,CACNiB,qBAAsB,SAACf,GACnBA,EAAMJ,WAAY,GAEtBoB,mBAAoB,SAAChB,EAAOE,GACxBF,EAAML,SAAWO,EAAOC,QACxBH,EAAMH,UAAYrE,KAAKwC,MACvBgC,EAAMJ,WAAY,GAEtBqB,wBAAyB,SAACjB,EAAOE,GAC7BF,EAAM5H,MAAQ8H,EAAOC,QACrBH,EAAMJ,WAAY,MAKbsB,EAAgCJ,EAAzCR,QAA6BC,EAAYO,EAAZP,QAC7BQ,GACJR,EADIQ,qBAAsBC,GAC1BT,EAD0BS,mBAAoBC,GAC9CV,EAD8CU,wBAU3C,IA2BQC,K,SC9DTC,GAAe,QA4BNC,GA1BK,CAChBpC,IAAI,WAAD,4BAAE,8BAAAnC,EAAA,sEACsBkC,EAAYC,IAAImC,IADtC,uBACO3J,EADP,EACOA,KADP,kBAEMA,GAFN,2CAAF,kDAAC,GAIJ6E,OAAO,WAAD,4BAAE,WAAO8D,GAAP,iBAAAtD,EAAA,sEACmBkC,EAAYE,IAC/BkC,GAAehB,EAAQrG,IACvBqG,GAHA,uBACI3I,EADJ,EACIA,KADJ,kBAKGA,GALH,2CAAF,mDAAC,GAOP6J,eAAe,WAAD,4BAAE,8BAAAxE,EAAA,sEACWkC,EAAYC,IAC/BmC,GAAelG,EAAoBe,aAF3B,uBACJxE,EADI,EACJA,KADI,kBAILA,GAJK,2CAAF,kDAAC,GAMf8J,OAAO,WAAD,4BAAE,WAAOnB,GAAP,iBAAAtD,EAAA,sEACmBkC,EAAYI,MAC/BgC,GAAelG,EAAoBe,YACnCmE,GAHA,uBACI3I,EADJ,EACIA,KADJ,kBAKGA,GALH,2CAAF,mDAAC,ICvBJ,SAAS+J,GAAUC,EAAKC,GAC3B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,G,aCCzC9G,GADCmH,eCDT,SAASC,GAAkB5J,GAC9B,OAAQA,GACJ,IAAK,mBACD,MAAO,8KACX,IAAK,eACD,MAAO,uMAEX,QACI,MAAO,gQCAnB,IAAMwH,GAAezE,EAAoBW,iBACnC,CACI+D,SAAU,KACVC,WAAW,EACXxH,MAAO,KACPiG,KAAM,CAAE0D,OAAQ9G,EAAoBe,aACpCgG,YAAY,EACZC,YAAY,GAEhB,CACItC,SAAU,KACVC,WAAW,EACXxH,MAAO,KACPiG,KAAM,KACN2D,YAAY,EACZC,YAAY,GAEhBC,GAAazC,sBAAY,CAC3BjH,KAAM,QACNkH,gBACAI,SAAU,CACNqC,eAAgB,SAACnC,GACbA,EAAMJ,WAAY,GAEtBwC,aAAc,SAACpC,EAAOE,GAClBF,EAAML,SAAWO,EAAOC,QACxBH,EAAMiC,YAAa,EACnBjC,EAAMJ,WAAY,GAEtByC,kBAAmB,SAACrC,EAAOE,GACvBF,EAAM5H,MAAQ8H,EAAOC,QACrBH,EAAMJ,WAAY,GAEtB0C,mBAAoB,SAACtC,EAAOE,GACxBF,EAAM3B,KAAO6B,EAAOC,QACpBH,EAAMgC,YAAa,GAEvBO,kBAAmB,SAACvC,EAAOE,GACvBF,EAAM5H,MAAQ8H,EAAOC,SAEzBqC,YAAa,SAACxC,EAAOE,GACjBF,EAAML,SAAS8C,KAAKvC,EAAOC,UAE/BuC,YAAa,SAAC1C,EAAOE,GACjBF,EAAML,SACFK,EAAML,SAASgD,WAAU,SAACC,GAAD,OAAOA,EAAE9I,MAAQoG,EAAOC,QAAQrG,QACzDoG,EAAOC,SAEf0C,oBAAqB,SAAC7C,EAAOE,GACzB,IAAM4C,EAAY9C,EAAML,SAASgD,WAC7B,SAACC,GAAD,OAAOA,EAAE9I,MAAQoG,EAAOC,QAAQrG,OAEpCkG,EAAML,SAASmD,GAAWC,UAAY7C,EAAOC,QAAQ4C,WAEzDC,yBAA0B,SAAChD,EAAOE,GAC9BF,EAAM5H,MAAQ8H,EAAOC,SAEzB8C,cAAe,SAACjD,GACZA,EAAML,SAAW,KACjBK,EAAMgC,YAAa,EACnBhC,EAAM3B,KAAO,KACb2B,EAAMiC,YAAa,GAEvBiB,cAAe,SAAClD,GACZA,EAAM5H,MAAQ,SAIT+K,GAA0BjB,GAAnC5B,QAAuBC,GAAY2B,GAAZ3B,QAE3B4B,GAUA5B,GAVA4B,eACAC,GASA7B,GATA6B,aACAC,GAQA9B,GARA8B,kBACAC,GAOA/B,GAPA+B,mBACAC,GAMAhC,GANAgC,kBACAC,GAKAjC,GALAiC,YACAE,GAIAnC,GAJAmC,YACAG,GAGAtC,GAHAsC,oBACAG,GAEAzC,GAFAyC,yBACAC,GACA1C,GADA0C,cAGEC,GAAgBE,uBAAa,uBAC7BC,GAAsBD,uBAAa,6BACnCE,GAAsBF,uBAAa,6BACnCG,GAA8BH,uBAChC,qCAEEI,GAAqBJ,uBAAa,4BAClCK,GAAmBL,uBAAa,0BAuDtC,SAASM,GAAWvD,GAChB,8CAAO,WAAgBM,GAAhB,iBAAA5D,EAAA,6DACH4D,EAAS4C,MADN,kBAG2BjC,GAAY/E,OAAO8D,GAH9C,gBAGSzB,EAHT,EAGSA,QACR+B,EAAS+B,GAAY9D,IACrBhE,GAAQ+H,KAAK,UALd,kDAOChC,EAASgD,GAAiB,KAAMvL,UAPjC,0DAAP,sDAwBG,SAASyL,GAAgBxD,GAC5B,8CAAO,WAAgBM,GAAhB,iBAAA5D,EAAA,6DACH4D,EAAS8C,MADN,kBAG2BnC,GAAYE,OAAOnB,GAH9C,gBAGSzB,EAHT,EAGSA,QACR+B,EAASoC,GAAoBnE,IAJ9B,gDAMC+B,EAASuC,GAAyB,KAAM9K,UANzC,yDAAP,sDAUG,IAAM0L,GAAgB,yDAAM,WAAOnD,GAAP,iBAAA5D,EAAA,6DAC/B4D,EAAS0B,MADsB,kBAGDf,GAAYpC,MAHX,gBAGnBN,EAHmB,EAGnBA,QACR+B,EAAS2B,GAAa1D,IAJK,gDAM3B+B,EAAS4B,GAAkB,KAAMnK,UANN,yDAAN,uDAehB2L,GAAc,SAAC9B,GAAD,OAAY,SAAC/B,GACpC,GAAIA,EAAM8D,MAAMnE,SACZ,OAAOK,EAAM8D,MAAMnE,SAASoE,MAAK,SAACnB,GAAD,OAAOA,EAAE9I,MAAQiI,OAK7CiC,GAAgB,kBAAM,SAAChE,GAAD,OAAWA,EAAM8D,MAAM7B,aAI3CkB,MCrNAc,GCkBM,WACjB,IAAMxD,EAAWyD,cADM,EAEWxL,oBAAS,GAFpB,mBAEhBkH,EAFgB,KAELuE,EAFK,OAGCzL,qBAHD,mBAGhBlB,EAHgB,KAGV4M,EAHU,KAIjBC,EAAcC,aF+KgB,SAACtE,GACrC,OAAOA,EAAM8D,MAAMnE,SACbK,EAAM8D,MAAMnE,SAASoE,MAAK,SAACnB,GAAD,OAAOA,EAAE9I,MAAQkG,EAAM8D,MAAMzF,KAAK0D,UAC5D,QEjLApB,EAAY2D,aToBY,SAACtE,GAAD,OAAWA,EAAMW,UAAUhB,YSnBnD4E,EAAmBD,aToBkB,SAACtE,GAAD,OAC3CA,EAAMW,UAAUf,aSpBV4E,EAAgB7D,EAAU/G,KAAI,SAAC6K,GAAD,MAAQ,CACxCnM,MAAOmM,EAAEjM,KACTP,MAAOwM,EAAE3K,QAEP4K,EAAcJ,aPqBY,SAACtE,GAAD,OAAWA,EAAM0E,YAAY/E,YOpBvDgF,EAAoBL,aPqBmB,SAACtE,GAAD,OAC7CA,EAAM0E,YAAY9E,aOrBZgF,EAAkBF,EAAY9K,KAAI,SAACiL,GAAD,MAAQ,CAC5CvM,MAAOuM,EAAErM,KACTP,MAAO4M,EAAE/K,QAfU,EAiBKpB,mBAAS,IAjBd,mBAiBhBhB,EAjBgB,KAiBRoN,EAjBQ,KA4CvB,IAAMC,EAAgB,SAACvN,GAMnB,OApBJ,SAA+BwN,GAC3B,IAAMC,EAAiB,GACvB,GAAID,EAAc,CAAC,IAAD,gBACOA,GADP,IACd,2BAAmC,CAAC,IAAD,EAAxBE,EAAwB,sBACTvE,GADS,IAC/B,2BAAiC,CAAC,IAAvBwE,EAAsB,QAC7B,GAAIA,EAAQrL,MAAQoL,EAAQ,CACxBD,EAAexC,KAAK0C,GACpB,QAJuB,gCADrB,+BAUlB,OAAOF,EAGQG,CAAsB5N,GAAMoC,KAAI,SAACyL,GAAD,MAAW,CACtD/M,MAAO+M,EAAK7M,KACZP,MAAOoN,EAAKvL,SAKpBwL,qBAAU,WACDX,GAAsBJ,IAAoBF,GAAgB7M,GAC3D4M,EAAQ,2BACDC,GADA,IAEH1D,UAAWoE,EAAcV,EAAY1D,gBAG9C,CAACgE,EAAmBJ,EAAkBF,EAAa7M,IACtD8N,qBAAU,WACF9N,GAAQoI,GACRuE,GAAa,KAElB,CAAC3M,IAEJ,IAAM+N,EAAkB,CACpBzI,MAAO,CACH0I,WAAY,CACRtN,QAAS,wPAEbuN,QAAS,CACLvN,QAAS,kHAIjBM,KAAM,CACFgN,WAAY,CACRtN,QAAS,4FAIrBoN,qBAAU,kBAAM3N,MAAY,CAACH,IAC7B,IAAM0C,EAAe,SAAClB,GAClBoL,GAAQ,SAAClL,GAAD,mBAAC,eACFA,GADC,kBAEHF,EAAOR,KAAOQ,EAAOf,YAGxBN,EAAW,WACb,IAAMD,EAASH,EAAUC,EAAM+N,GAE/B,OADAT,EAAUpN,GAC4B,IAA/BgC,OAAOC,KAAKjC,GAAQM,QAEzB0N,EAAyC,IAA/BhM,OAAOC,KAAKjC,GAAQM,OACpC,OACI,sBAAKa,UAAU,iBAAf,UACI,cAAC,EAAD,IACA,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,kCAAf,UACM+G,GAAalG,OAAOC,KAAK+K,GAAa1M,OAAS,EAC7C,uBAAM2N,SAlFL,SAACC,GAElB,IF6HuBzF,GE9HvByF,EAAEC,iBACclO,MAEhB8I,GF2HuBN,EE1HJ,2BACR3I,GADO,IAEVmJ,UAAWnJ,EAAKmJ,UAAU/G,KAAI,SAAC6K,GAAD,OAAOA,EAAExM,WFyHnD,uCAAO,WAAgBwI,GAAhB,iBAAA5D,EAAA,6DACH4D,EAAS6C,MADN,kBAG2BlC,GAAYE,OAAOnB,GAH9C,gBAGSzB,EAHT,EAGSA,QACR+B,EAASiC,GAAYhE,IACrBhE,GAAQ+H,KAAR,iBAAuB/D,EAAQ5E,MALhC,kDAOC2G,EAAS+C,GAAmB,KAAMtL,UAPnC,0DAAP,yDE9CoB,UACI,cAAC,EAAD,CACII,MAAM,qBACNE,KAAK,OACLP,MAAOT,EAAKgB,KACZC,SAAUyB,EACV9B,MAAOV,EAAOc,OAElB,cAAC,EAAD,CACIF,MAAM,oGACNE,KAAK,QACLP,MAAOT,EAAKsF,MACZrE,SAAUyB,EACV9B,MAAOV,EAAOoF,QAElB,cAAC,EAAD,CACIxE,MAAM,uHACNe,cAAc,YACdb,KAAK,aACLc,QAASsL,EACTnM,SAAUyB,EACVjC,MAAOT,EAAKsO,WACZ1N,MAAOV,EAAOoO,aAElB,cAAC,EAAD,CACIxM,QAAS,CACL,CAAEd,KAAM,OAAQP,MAAO,QACvB,CAAEO,KAAM,SAAUP,MAAO,UACzB,CAAEO,KAAM,QAASP,MAAO,UAE5BA,MAAOT,EAAKuO,IACZvN,KAAK,MACLC,SAAUyB,EACV5B,MAAM,2FAEV,cAAC,EAAD,CACI+B,aAAc7C,EAAKmJ,UACnBrH,QAASkL,EACT/L,SAAUyB,EACV1B,KAAK,YACLF,MAAM,+HAEV,wBACIC,KAAK,SACLwB,UAAW2L,EACX7M,UAAU,gCAHd,iEASJ,qBCpHTmN,GAlDE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVvL,EAAUC,cACV0J,EAAcC,aH+LgB,SAACtE,GACrC,OAAOA,EAAM8D,MAAMnE,SACbK,EAAM8D,MAAMnE,SAASoE,MAAK,SAACnB,GAAD,OAAOA,EAAE9I,MAAQkG,EAAM8D,MAAMzF,KAAK0D,UAC5D,QG9LN,OACI,qBAAKlJ,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACKwL,EAAYvK,MAAQmM,EAAKnM,KACtB,wBACIjB,UAAU,qDACVI,QATA,WAChByB,EAAQ+H,KAAK/H,EAAQwL,SAASC,SAAW,UAM7B,SAII,mBAAGtN,UAAU,iBAIrB,sBAAKA,UAAU,sEAAf,UACI,qBACIuN,IAAKH,EAAKI,MACVxN,UAAU,iBACVyN,MAAM,QAEV,sBAAKzN,UAAU,OAAf,UACI,6BAAKoN,EAAKzN,OACV,mBAAGK,UAAU,sBAAb,SACKoN,EAAKH,WAAWtN,OAErB,sBAAKK,UAAU,aAAf,UACI,mBACIA,UAAU,qCACV0N,KAAK,WAET,mBACI1N,UAAU,gCACV0N,KAAK,WAET,sBAAM1N,UAAU,OAAhB,SAAwBoN,EAAKO,sBC3B1CC,GAdC,SAAC,GAA0B,IAAxB3M,EAAuB,EAAvBA,IAAK4M,EAAkB,EAAlBA,MAAOlO,EAAW,EAAXA,KAC3B,OACI,sBAAMK,UAAW,gBAAkB6N,EAAnC,SACKlO,GAD0CsB,ICHxC6M,GCSO,SAAC,GAAmB,IbqCT3B,EarCRrE,EAAgB,EAAhBA,UACfF,EAAWyD,cACXtE,EAAY0E,abiCyB,SAACtE,GAAD,OAC3CA,EAAMW,UAAUf,aajCV4E,EAAgBF,abkCOU,EalCsBrE,EbkCL,SAACX,GAC/C,GAAIgF,GAAgBhF,EAAMW,UAAUhB,SAAU,CAC1C,IAD0C,EACpCsF,EAAiB,GADmB,cAErBD,GAFqB,IAE1C,2BAAmC,CAAC,IAAD,EAAxBE,EAAwB,sBACTlF,EAAMW,UAAUhB,UADP,IAC/B,2BAAgD,CAAC,IAAtCwF,EAAqC,QAC5C,GAAIA,EAAQrL,MAAQoL,EAAQ,CACxBD,EAAexC,KAAK0C,GACpB,QAJuB,gCAFO,8BAU1C,OAAOF,EAEX,MAAO,Ma1CP,OAJAK,qBAAU,WACN7E,EAASD,OACV,IAECZ,EAAkB,cAGlB,mCACK4E,EAAc5K,KAAI,SAACyL,GAAD,OACf,cAAC,GAAD,eAA4BA,GAAdA,EAAKvL,WCDpB8M,GAlBO,SAAC,GAAc,IAAZpP,EAAW,EAAXA,KACrB,OACI,qBAAKqB,UAAU,YAAf,SACI,sBAAKA,UAAU,kEAAf,UACI,oBAAIA,UAAU,aAAd,SACI,sFAEJ,mBAAGA,UAAU,YAAb,SACI,cAAC,GAAD,CAAW8H,UAAWnJ,YCO3BqP,GAjBM,SAAC,GAAe,IAAb5O,EAAY,EAAZA,MACpB,OACI,qBAAKY,UAAU,YAAf,SACI,sBAAKA,UAAU,kEAAf,UACI,oBAAIA,UAAU,aAAd,SACI,uIAGJ,oBAAIA,UAAU,YAAd,SAA2BZ,U,oBCVpC,SAAS6O,GAAYtP,GACxB,IAAM+H,EAAO,IAAI/D,KAAKuL,SAASvP,IACzBwP,EAAU,IAAIxL,KAEpB,GAAgB,IADAwL,EAAQC,cAAgB1H,EAAK0H,cAC1B,CAEf,GAAe,IADAD,EAAQE,SAAW3H,EAAK2H,SACrB,CAEd,GAAgB,IADAF,EAAQG,WAAa5H,EAAK4H,WACvB,CACf,IAAMC,EAAaJ,EAAQK,aAAe9H,EAAK8H,aAE/C,OAAID,GAAc,GAAKA,EAAa,EAAU,wEAC1CA,GAAc,GAAKA,EAAa,GAAW,kEAC3CA,GAAc,IAAMA,EAAa,GAC1B,mEAEJ,mEAEX,MAAM,GAAN,OAAU7H,EAAK4H,WAAf,YAA6B5H,EAAK8H,cAGtC,MAAM,GAAN,OAAU9H,EAAK2H,SAAf,YAA2B3H,EAAK+H,eAAe,UAAW,CACtDC,MAAO,UAGf,OACIhI,EAAK0H,cAAgB,KAAO1H,EAAKiI,WAAa,GAAK,IAAMjI,EAAKkI,UCrBtE,IA0DeC,GA1DC,SAAC,GAMV,IALHhJ,EAKE,EALFA,QACYiJ,EAIV,EAJFC,WACK7O,EAGH,EAHFe,IACAiI,EAEE,EAFFA,OACA8F,EACE,EADFA,SAEMC,EAAgBxD,aVuMY,SAACtE,GAAD,OAAWA,EAAM8D,MAAMzF,KAAK0D,UUtMxDkE,EAAO3B,YAAYT,GAAY9B,IAErC,OACI,qBAAKlJ,UAAU,2BAAf,SACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,qBACIuN,IAAKH,EAAKI,MACVxN,UAAU,sCACVkP,IAAI,SACJzB,MAAM,KACN0B,OAAO,OAEX,qBAAKnP,UAAU,4BAAf,SACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,oDAAf,UACI,oBAAGA,UAAU,QAAb,UACKoN,GAAQA,EAAKzN,KAAM,IACpB,uBAAMK,UAAU,QAAhB,eACOiO,GAAYa,SAGtBG,IAAkB/F,GACf,wBACIlJ,UAAU,oDACVI,QAAS,kBAAM4O,EAAS9O,IAF5B,SAII,mBAAGF,UAAU,oBAIzB,mBAAGA,UAAU,aAAb,SAA2B6F,mBC/B5CuJ,GAVM,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUL,EAAe,EAAfA,SAC9B,OAAOK,EAAStO,KAAI,SAACuO,GAAD,OAChB,cAAC,GAAD,2BAA+BA,GAA/B,IAAwCN,SAAUA,IAApCM,EAAQrO,SCHxBsO,GAAgB,SAAC,GAA6C,IAA3C9P,EAA0C,EAA1CA,MAAOE,EAAmC,EAAnCA,KAAMP,EAA6B,EAA7BA,MAAOQ,EAAsB,EAAtBA,SAAUL,EAAY,EAAZA,MAQnD,OACI,sBAAKS,UAAU,OAAf,UACI,wBAAOC,QAASN,EAAhB,cAAwBF,KACxB,sBAAKO,UAAU,6BAAf,UACI,0BACIE,GAAIP,EACJA,KAAMA,EACNP,MAAOA,EACPQ,SAfK,SAAC,GAAgB,IAAdO,EAAa,EAAbA,OACpBP,EAAS,CAAED,KAAMQ,EAAOR,KAAMP,MAAOe,EAAOf,SAehCY,UAZL,gBAAkBT,EAAQ,cAAgB,MAexCA,GAAS,qBAAKS,UAAU,oBAAf,SAAoCT,WAK9DgQ,GAAcjP,aAAe,CACzBZ,KAAM,QAWK6P,UCuBAC,GA1DQ,SAAC,GAAkB,IAAhB1C,EAAe,EAAfA,SAAe,EACbjN,mBAAS,IADI,mBAC9BlB,EAD8B,KACxB4M,EADwB,OAET1L,mBAAS,IAFA,mBAE9BhB,EAF8B,KAEtBoN,EAFsB,KAS/BS,EAAkB,CACpB7G,QAAS,CACL8G,WAAY,CACRtN,QAAS,sKAwBrB,OACI,gCACI,qJACA,uBAAMyN,SAXO,SAACC,GAClBA,EAAEC,iBAZW,WACb,IAAMnO,EAASH,EAAUC,EAAM+N,GAG/B,OADAT,EAAUpN,GAC4B,IAA/BgC,OAAOC,KAAKjC,GAAQM,OASXL,KAEhBgO,EAASnO,GAPT4M,EAAQ,IACRU,EAAU,MAaN,UACI,cAAC,GAAD,CACI7M,MAAOT,EAAKkH,SAAW,GACvBjG,SAvCK,SAACO,GAClBoL,GAAQ,SAAClL,GAAD,mBAAC,eACFA,GADC,kBAEHF,EAAOR,KAAOQ,EAAOf,YAqCdO,KAAK,UACLF,MAAM,yDACNF,MAAOV,EAAOgH,UAElB,qBAAK7F,UAAU,6BAAf,SACI,wBAAQA,UAAU,kBAAlB,+FCnDLoP,MCDTK,GAAkB,WAsBTC,GApBQ,CACnBC,cAAc,WAAD,4BAAE,WAAOrI,GAAP,iBAAAtD,EAAA,sEACYkC,EAAYE,IAC/BqJ,GAAkBnI,EAAQrG,IAC1BqG,GAHO,uBACH3I,EADG,EACHA,KADG,kBAMJA,GANI,2CAAF,mDAAC,GAQdiR,YAAY,WAAD,4BAAE,WAAOC,GAAP,iBAAA7L,EAAA,sEACckC,EAAYC,IAAIsJ,GAAiB,CACpD/L,OAAQ,CAAEoM,QAAS,WAAYC,QAAQ,IAAD,OAAMF,EAAN,QAFjC,uBACDlR,EADC,EACDA,KADC,kBAIFA,GAJE,2CAAF,mDAAC,GAMZqR,cAAc,WAAD,4BAAE,WAAOC,GAAP,iBAAAjM,EAAA,sEACYkC,EAAYG,OAAOoJ,GAAkBQ,GADjD,uBACHtR,EADG,EACHA,KADG,kBAEJA,GAFI,2CAAF,mDAAC,ICfZuR,GAAgBtJ,sBAAY,CAC9BjH,KAAM,WACNkH,aAAc,CACVC,SAAU,KACVC,WAAW,EACXxH,MAAO,MAEX0H,SAAU,CACNkJ,kBAAmB,SAAChJ,GAChBA,EAAMJ,WAAY,GAEtBqJ,gBAAiB,SAACjJ,EAAOE,GACrBF,EAAML,SAAWO,EAAOC,QACxBH,EAAMJ,WAAY,GAEtBsJ,qBAAsB,SAAClJ,EAAOE,GAC1BF,EAAM5H,MAAQ8H,EAAOC,QACrBH,EAAMJ,WAAY,GAEtBuJ,aAAc,SAACnJ,EAAOE,GAClBF,EAAML,SAAS8C,KAAKvC,EAAOC,UAE/BiJ,iBAAkB,SAACpJ,EAAOE,GACtBF,EAAM5H,MAAQ8H,EAAOC,SAEzBkJ,eAAgB,SAACrJ,EAAOE,GACpBF,EAAML,SAAWK,EAAML,SAAS2J,QAC5B,SAACC,GAAD,OAAOA,EAAEzP,MAAQoG,EAAOC,YAGhCqJ,oBAAqB,SAACxJ,EAAOE,GACzBF,EAAM5H,MAAQ8H,EAAOC,YAKhBsJ,GAA6BV,GAAtCzI,QAA0BC,GAAYwI,GAAZxI,QAE9ByI,GAOAzI,GAPAyI,kBACAC,GAMA1I,GANA0I,gBACAC,GAKA3I,GALA2I,qBACAC,GAIA5I,GAJA4I,aACAC,GAGA7I,GAHA6I,iBACAC,GAEA9I,GAFA8I,eACAG,GACAjJ,GADAiJ,oBAGEE,GAAoBtG,uBAAa,uBACjCuG,GAAuBvG,uBAAa,0BAqC3BqG,M,SCnBAG,GAtDE,WAAO,IACZ7H,EAAW8H,cAAX9H,OACFtB,EAAWyD,cACX4D,EAAgBxD,ajBiMY,SAACtE,GAAD,OAAWA,EAAM8D,MAAMzF,KAAK0D,UiBhM9DuD,qBAAU,WACN7E,EDuDwB,SAACsB,GAAD,8CAAY,WAAOtB,GAAP,iBAAA5D,EAAA,6DACxC4D,EAASuI,MAD+B,kBAGVT,GAAeE,YAAY1G,GAHjB,gBAG5BrD,EAH4B,EAG5BA,QACR+B,EAASwI,GAAgBvK,IAJW,gDAMpC+B,EAASyI,GAAqB,KAAMhR,UANA,yDAAZ,sDCvDf4R,CAAiB/H,MAC3B,CAACA,IACJ,IAAMnC,EAAY0E,aD+DwB,SAACtE,GAAD,OAC1CA,EAAMkI,SAAStI,aC9DTsI,EAAW5D,aD4DY,SAACtE,GAAD,OAAWA,EAAMkI,SAASvI,YC5CjDoK,EAAiBpB,mBAAQT,EAAU,CAAC,cAAe,CAAC,SAC1D,OACI,qCACI,sBAAKrP,UAAU,YAAf,UACK,IACD,qBAAKA,UAAU,aAAf,SACI,cAAC,GAAD,CAAgB8M,SApBX,SAACnO,GD2BA,IAAC2I,EC1BnBM,GD0BmBN,ECzBJ,2BACJ3I,GADG,IAENsC,IAAKkQ,eACLtB,OAAQ3G,EACR6F,WAAYpM,KAAKwC,MACjB+D,OAAQ+F,IDoBE,uCAAa,WAAOrH,GAAP,iBAAA5D,EAAA,6DACnC4D,EAASiJ,MAD0B,kBAGLnB,GAAeC,cAAcrI,GAHxB,gBAGvBzB,EAHuB,EAGvBA,QACR+B,EAAS0I,GAAazK,IAJS,gDAM/B+B,EAAS2I,GAAiB,KAAMlR,UAND,yDAAb,gECJb6R,EAAe/R,OAAS,GACrB,qBAAKa,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,0CACA,uBACE+G,EAME,aALA,cAAC,GAAD,CACIsI,SAAU6B,EACVlC,SApBA,SAAC9O,GDyBJ,IAAC+P,ECxBtBrI,GDwBsBqI,ECxBC/P,EDwBF,uCAAe,WAAO0H,GAAP,iBAAA5D,EAAA,6DACxC4D,EAASkJ,MAD+B,kBAGVpB,GAAeM,cAAcC,GAHnB,gBAG5BpK,EAH4B,EAG5BA,QAEJ+B,EADY,OAAZ/B,EACS2K,GAAeP,GAEfU,GAAoBV,IAPG,gDAUpCrI,EAAS+I,GAAoB,KAAMtR,UAVC,yDAAf,oEE7Dd+R,GCQE,SAAC,GAAgB,IAAdlI,EAAa,EAAbA,OACVkE,EAAO3B,YAAYT,GAAY9B,IAErC,OAAIkE,EAEI,qBAAKpN,UAAU,YAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,GAAD,CAAUoN,KAAMA,IAChB,cAAC,GAAD,CAAezO,KAAMyO,EAAKtF,YAC1B,cAAC,GAAD,CAAc1I,MAAOgO,EAAKiE,uBAE9B,qBAAKrR,UAAU,WAAf,SACI,cAAC,GAAD,WAMT,0C,SCzBf,IAqCesR,GArCI,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,WAAYC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAChDC,EAAa9I,KAAK+I,KAAKL,EAAaC,GAC1C,GAAmB,IAAfG,EAAkB,OAAO,KAC7B,IAAME,EAAQC,KAAEC,MAAM,EAAGJ,EAAa,GAEtC,OACI,8BACI,oBAAI3R,UAAU,aAAd,SACK6R,EAAM9Q,KAAI,SAACiR,GAAD,OACP,oBACIhS,UACI,cACCgS,IAASN,EAAc,SAAW,IAH3C,SAOI,wBACI1R,UAAU,YACVI,QAAS,WACLqR,EAAaO,IAHrB,SAMKA,KARA,QAAUA,WCdjCC,GAAY,SAAC,GAMZ,IALHC,EAKE,EALFA,MACAC,EAIE,EAJFA,cACAC,EAGE,EAHFA,gBACAC,EAEE,EAFFA,aACAC,EACE,EADFA,aAEA,OAAK3R,MAAMC,QAAQsR,GAoBf,oBAAIlS,UAAU,aAAd,SACKkS,EAAMnR,KAAI,SAACwR,GAAD,OACP,oBAEIvS,UACI,mBACCuS,IAASD,EAAe,UAAY,IAEzClS,QAAS,kBAAMiS,EAAaE,IAC5B7E,KAAK,SAPT,SASK6E,EAAKH,IARDG,EAAKJ,SArBlB,oBAAInS,UAAU,aAAd,SACKa,OAAOC,KAAKoR,GAAOnR,KAAI,SAACwR,GAAD,OACpB,oBAEIvS,UACI,mBACCkS,EAAMK,KAAUD,EAAe,UAAY,IAEhDlS,QAAS,kBAAMiS,EAAaH,EAAMK,KAClC7E,KAAK,SAPT,SASKwE,EAAMK,GAAMH,IARRF,EAAMK,GAAMJ,UAgCzCF,GAAU3R,aAAe,CACrB6R,cAAe,MACfC,gBAAiB,QAUNH,UC/BAO,GA1BM,SAAC,GAAgB,IAAdrT,EAAa,EAAbA,OAUpB,OACI,6BACI,sBACIa,UAAW,UAAYb,EAAS,EAAI,aAAe,aADvD,SAGKA,EAAS,EAAT,UACQA,EAAS,IAfT,SAACsT,GAClB,IAAMC,EAAUC,OAAOF,EAAOG,WAAW1N,OAAO,IAChD,OAAIuN,EAAS,GAAKA,EAAS,IAGX,IAAZC,EAFO,wFAGP,CAAC,EAAG,EAAG,GAAGG,QAAQH,IAAY,EAAU,8FACrC,wFAQyBI,CAAa3T,GADpC,uFAEK,oICNP4T,GAXE,SAAC,GAAyB,IAAvBjN,EAAsB,EAAtBA,OAAWkN,EAAW,2BACtC,OACI,kDAAYA,GAAZ,aACI,mBAAGhT,UAAW,kBAAoB8F,EAAS,cAAgB,UC4BxDmN,GA7BG,SAAC,GAAuB,IAArBtU,EAAoB,EAApBA,KAAMuU,EAAc,EAAdA,QACjBC,EAAgB,SAACZ,EAAMa,GACzB,GAAIF,EAAQE,GAAQC,UAAW,CAC3B,IAAMA,EAAYH,EAAQE,GAAQC,UAClC,MAAyB,oBAAdA,EACAA,EAAUd,GAEdc,EAEX,OAAOvB,KAAE3L,IAAIoM,EAAMW,EAAQE,GAAQE,OAEvC,OACI,gCACK3U,EAAKoC,KAAI,SAACwR,GAAD,OACN,6BACK1R,OAAOC,KAAKoS,GAASnS,KAAI,SAACqS,GAAD,OACtB,6BAAkBD,EAAcZ,EAAMa,IAA7BA,OAFRb,EAAKtR,WCkCfsS,GAlDK,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,aAAcP,EAAc,EAAdA,QAWnCQ,EAAiB,SAACD,EAAcE,GAClC,OAAIF,EAAaH,OAASK,EACK,QAAvBF,EAAaG,MACN,mBAAG5T,UAAU,0BAEb,mBAAGA,UAAU,wBAGrB,MAGX,OACI,gCACI,6BACKa,OAAOC,KAAKoS,GAASnS,KAAI,SAACqS,GAAD,OACtB,qBAEIhT,QACI8S,EAAQE,GAAQE,KACV,kBA7BVf,EA6B2BW,EAAQE,GAAQE,UA5BvDG,EAAaH,OAASf,EACtBiB,EAAO,2BACAC,GADD,IAEFG,MAA8B,QAAvBH,EAAaG,MAAkB,OAAS,SAGnDJ,EAAO,CAAEF,KAAMf,EAAMqB,MAAO,SAPjB,IAACrB,QA8BUsB,EAEJnG,KAAMwF,EAAQE,GAAQE,MAAQ,SACpCQ,MAAM,MARV,UAUKZ,EAAQE,GAAQzT,KAAM,IACtB+T,EAAeD,EAAcP,EAAQE,GAAQE,QAVzCF,WCzBdW,GCCD,SAAC,GAAuD,IAArDP,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,aAAcP,EAA8B,EAA9BA,QAASvU,EAAqB,EAArBA,KAAMqV,EAAe,EAAfA,SAClD,OACI,uBAAOhU,UAAU,QAAjB,SACKgU,GACG,qCACI,cAAC,GAAD,CAAmBR,SAAQC,eAAcP,YACzC,cAAC,GAAD,CAAiBA,UAASvU,e,QCS/BsV,GAXI,SAAC,GAAY,IAAV/T,EAAS,EAATA,GACZ6G,EAAY0E,ajC0C2B,SAACtE,GAAD,OAC7CA,EAAM0E,YAAY9E,aiC1CZmN,EAAOzI,YjC2CgB,SAACvL,GAAD,OAAQ,SAACiH,GACtC,GAAIA,EAAM0E,YAAY/E,SAAU,CAAC,IAAD,gBACHK,EAAM0E,YAAY/E,UADf,IAC5B,2BAAqD,CAAC,IAA3CmG,EAA0C,QACjD,GAAIA,EAAWhM,MAAQf,EACnB,OAAO+M,GAHa,+BAOhC,MAAO,IiCnDkBkH,CAAkBjU,IAE3C,OAAK6G,EAES,cADH,4BAAImN,EAAKvU,QCqDTyU,GA1DG,SAAC,GAOZ,IANHnJ,EAME,EANFA,MACAuI,EAKE,EALFA,OACAC,EAIE,EAJFA,aACAY,EAGE,EAHFA,iBACAC,EAEE,EAFFA,qBAGMpB,GADJ,4FACc,CACZvT,KAAM,CACF2T,KAAM,OACN3T,KAAM,qBACN0T,UAAW,SAACjG,GAAD,OACP,cAAC,KAAD,CAAMmH,GAAE,iBAAYnH,EAAKnM,KAAzB,SAAiCmM,EAAKzN,SAG9CmI,UAAW,CACPnI,KAAM,mDACN0T,UAAW,SAACjG,GAAD,OAAU,cAAC,GAAD,CAAWtF,UAAWsF,EAAKtF,cAEpD+D,YAAa,CACTlM,KAAM,yDACN0T,UAAW,SAACjG,GAAD,OAAU,cAAC,GAAD,CAAYlN,GAAIkN,EAAKH,eAE9CoE,kBAAmB,CACfiC,KAAM,oBACN3T,KAAM,oFAEVgO,KAAM,CAAE2F,KAAM,OAAQ3T,KAAM,wCAC5B6U,SAAU,CACNlB,KAAM,WACN3T,KAAM,yDACN0T,UAAW,SAACjG,GAAD,OACP,cAAC,GAAD,CACItH,OAAQwO,EAAqBG,SAASrH,EAAKnM,KAC3Cb,QAAS,kBAAMiU,EAAiBjH,EAAKnM,YAKrD,OACI,cAAC,GAAD,CACIuS,OAAQA,EACRC,aAAcA,EACdP,QAASA,EACTvU,KAAMsM,KCrDHyJ,GCkBO,WAClB,IAAMzJ,EAAQQ,a/BiLgB,SAACtE,GAAD,OAAWA,EAAM8D,MAAMnE,Y+BhL/CmI,EAAgBxD,a/B8LY,SAACtE,GAAD,OAAWA,EAAM8D,MAAMzF,KAAK0D,U+B7LxDkE,EAAO3B,a/BgLuB,SAACtE,GACrC,OAAOA,EAAM8D,MAAMnE,SACbK,EAAM8D,MAAMnE,SAASoE,MAAK,SAACnB,GAAD,OAAOA,EAAE9I,MAAQkG,EAAM8D,MAAMzF,KAAK0D,UAC5D,Q+BlLAoL,EAAuBlH,EAAKlD,WAAa,GACzCtC,EAAWyD,cACXQ,EAAcJ,apC0BY,SAACtE,GAAD,OAAWA,EAAM0E,YAAY/E,YoCzBvD6N,EAAqBlJ,apC0BkB,SAACtE,GAAD,OAC7CA,EAAM0E,YAAY9E,aoClCM,EAQclH,mBAAS,GARvB,mBAQjB6R,EARiB,KAQJkD,EARI,OASc/U,mBAAS,IATvB,mBASjBgV,EATiB,KASJC,EATI,OAUgBjV,qBAVhB,mBAUjBkV,EAViB,KAUHC,EAVG,OAWInV,mBAAS,CAAEyT,KAAM,OAAQM,MAAO,QAXpC,mBAWjBqB,EAXiB,KAWTC,EAXS,KAgCxBzI,qBAAU,WACNmI,EAAe,KAChB,CAACG,EAAcF,IA+BlB,IAbqBlW,EAafwW,GAbexW,EAaasM,GAZR4J,EAChBlW,EAAK8R,QACD,SAACrD,GAAD,OAGiD,IAF7CA,EAAKzN,KACAyV,cACAvC,QAAQgC,EAAYO,kBAEjCL,EACApW,EAAK8R,QAAO,SAACrD,GAAD,OAAUA,EAAKH,aAAe8H,EAAa9T,OACvDtC,GACe8R,QAAO,SAAC1G,GAAD,OAAOA,EAAE9I,MAAQgO,MAG3CoG,EAAQF,EAAchW,OAEtBmW,ECrFH,SAAkBpD,EAAOqD,EAAY/D,GACxC,IAAMgE,GAAcD,EAAa,GAAK/D,EACtC,OAAOM,KAAEI,GAAOhN,MAAMsQ,GAAYC,KAAKjE,GAAUpS,QDmF/BsW,CADE5D,KAAEhC,QAAQqF,EAAe,CAACF,EAAO3B,MAAO,CAAC2B,EAAOrB,QAC5BlC,EAxDvB,GA6DjB,OACI,sBAAK1R,UAAU,SAAf,UACK6L,IAAgB8I,GACb,sBAAK3U,UAAU,uCAAf,UACI,cAAC,GAAD,CACIsS,aAAcyC,EACd7C,MAAOrG,EACPwG,aA5CW,SAACE,GACR,KAAhBsC,GAAoBC,EAAe,IACvCE,EAAgBzC,MA4CJ,wBACIvS,UAAU,yBACVI,QAfA,WAChB4U,KAYY,uEAQR,sBAAKhV,UAAU,qBAAf,UACI,cAAC,GAAD,CAAcb,OAAQkW,IACtB,uBACI3V,KAAK,OACLC,KAAK,cACLgW,YAAY,YACZ/V,SAxDU,SAAC,GAAgB,IAAdO,EAAa,EAAbA,OACzB6U,OAAgBnB,GAChBiB,EAAe3U,EAAOf,QAuDVA,MAAOyV,IAEVQ,EAAQ,GACL,cAAC,GAAD,CACIpK,MAAOqK,EACP9B,OAtDD,SAACjB,GAChB2C,EAAU3C,IAsDMkB,aAAcwB,EACdX,qBAAsBA,EACtBD,iBA3FS,SAACnU,GACrBoU,EAAqBG,SAASvU,GAQ/B0H,EACIkD,GAAgB,CACZ7J,IAAKmM,EAAKnM,IACViJ,UAAWoK,EAAqB7D,QAAO,SAACmF,GAAD,OAAOA,IAAM1V,QAV5D0H,EACIkD,GAAgB,CACZ7J,IAAKmM,EAAKnM,IACViJ,UAAU,GAAD,oBAAMoK,GAAN,CAA4BpU,UAyFzC,qBAAKF,UAAU,gCAAf,SACI,cAAC,GAAD,CACIuR,WAAY8D,EACZ7D,SAnGH,EAoGGE,YAAaA,EACbD,aApEK,SAACoE,GACtBjB,EAAeiB,e,oBE7DvB,SAASC,GAAT,GAAoC,IAAb9B,EAAY,EAAZA,SACb+B,EAAatK,YAAYN,IACzBvD,EAAWyD,cAMjB,OALAoB,qBAAU,WACDsJ,GACDnO,EAASmD,QAEd,IACEgL,EAEE/B,EAFiB,aAI5B8B,GAAYE,UAAY,CACpBhC,SAAUiC,KAAUC,UAAU,CAC1BD,KAAUE,QAAQF,KAAUG,MAC5BH,KAAUG,QAGHN,UCYAO,GA1BD,WACV,IAAM3S,EAASsN,cACP9H,EAAiBxF,EAAjBwF,OAAQoN,EAAS5S,EAAT4S,KACVrH,EAAgBxD,alCwMY,SAACtE,GAAD,OAAWA,EAAM8D,MAAMzF,KAAK0D,UkCtM9D,OACI,mCACI,cAAC,GAAD,UACKA,EACGoN,EACIpN,IAAW+F,EACP,cAAC,GAAD,IAEA,cAAC,IAAD,CAAUsF,GAAE,iBAAYtF,EAAZ,WAGhB,cAAC,GAAD,CAAU/F,OAAQA,IAGtB,cAAC,GAAD,SCWLqN,GAnCO,SAAC,GAAgD,IAA9C5W,EAA6C,EAA7CA,KAAMP,EAAuC,EAAvCA,MAAOQ,EAAgC,EAAhCA,SAAUoU,EAAsB,EAAtBA,SAAUzU,EAAY,EAAZA,MAOtD,OACI,sBAAKS,UAAU,kBAAf,UACI,uBACIA,UALD,oBAAsBT,EAAQ,cAAgB,IAM7CG,KAAK,WACLN,MAAM,GACNc,GAAIP,EACJC,SAbS,WACjBA,EAAS,CAAED,KAAMA,EAAMP,OAAQA,KAavBkC,QAASlC,IAEb,uBAAOY,UAAU,oBAAoBC,QAASN,EAA9C,SACKqU,IAEJzU,GAAS,qBAAKS,UAAU,mBAAf,SAAmCT,QCqE1CiX,GApFG,WAAO,IAAD,EACI3W,mBAAS,CAC7BoE,MAAO,GACPC,SAAU,GACVuS,QAAQ,IAJQ,mBACb9X,EADa,KACP4M,EADO,KAMdmL,EAAajL,apCuMY,SAACtE,GAAD,OAAWA,EAAM8D,MAAM1L,SoCtMhDsC,EAAUC,cACV8F,EAAWyD,cARG,EASQxL,mBAAS,IATjB,mBASbhB,EATa,KASLoN,EATK,KAUd5K,EAAe,SAAClB,GAClBoL,GAAQ,SAAClL,GAAD,mBAAC,eACFA,GADC,kBAEHF,EAAOR,KAAOQ,EAAOf,YAIxBsN,EAAkB,CACpBzI,MAAO,CACH0I,WAAY,CACRtN,QAAS,yPAGjB6E,SAAU,CACNyI,WAAY,CACRtN,QAAS,uLAIrBoN,qBAAU,WACN3N,MACD,CAACH,IACJ,IAAMG,EAAW,WACb,IAAMD,EAASH,EAAUC,EAAM+N,GAE/B,OADAT,EAAUpN,GAC4B,IAA/BgC,OAAOC,KAAKjC,GAAQM,QAEzB0N,EAAyC,IAA/BhM,OAAOC,KAAKjC,GAAQM,OAWpC,OACI,uBAAM2N,SAVW,SAACC,GAGlB,GAFAA,EAAEC,iBACclO,IAChB,CACA,IAAM6X,EAAW9U,EAAQwL,SAASlG,MAC5BtF,EAAQwL,SAASlG,MAAMyP,KAAKtJ,SAC5B,IACN1F,EpC6CJ,SAAC,GAAD,IAAGN,EAAH,EAAGA,QAASqP,EAAZ,EAAYA,SAAZ,8CACA,WAAO/O,GAAP,2BAAA5D,EAAA,6DACYC,EAAoBqD,EAApBrD,MAAOC,EAAaoD,EAAbpD,SACf0D,EAASyC,MAFb,kBAI2BvG,EAAYO,MAAM,CAAEJ,QAAOC,aAJtD,OAIcvF,EAJd,OAKQiJ,EAAS6B,GAAmB,CAAEP,OAAQvK,EAAK6D,WAC3CJ,EAAoBC,UAAU1D,GAC9BkD,GAAQ+H,KAAK+M,GAPrB,oDASkC,KAAMhR,SAAShH,KAAKY,MAAtCsX,EAThB,EASgBA,KAAMxX,EATtB,EASsBA,QACD,MAATwX,GACMC,EAAe7N,GAAkB5J,GACvCuI,EAAS8B,GAAkBoN,KAE3BlP,EAAS8B,GAAkB,KAAMrK,UAd7C,0DADA,sDoC7CagF,CAAM,CAAEiD,QAAS3I,EAAMgY,gBAGhC,UACI,cAAC,EAAD,CACIlX,MAAM,oGACNE,KAAK,QACLP,MAAOT,EAAKsF,MACZrE,SAAUyB,EACV9B,MAAOV,EAAOoF,QAElB,cAAC,EAAD,CACIxE,MAAM,uCACNC,KAAK,WACLC,KAAK,WACLP,MAAOT,EAAKuF,SACZtE,SAAUyB,EACV9B,MAAOV,EAAOqF,WAElB,cAAC,GAAD,CACI9E,MAAOT,EAAK8X,OACZ7W,SAAUyB,EACV1B,KAAK,SAHT,4HAOC+W,GAAc,mBAAG1W,UAAU,cAAb,SAA4B0W,IAC3C,wBACIhX,KAAK,SACLwB,UAAW2L,EACX7M,UAAU,gCAHd,wECiGG+W,GAtKM,WACjB,IAAMnP,EAAWyD,cADM,EAECxL,mBAAS,CAC7BoE,MAAO,GACPC,SAAU,GACV+I,WAAY,GACZC,IAAK,OACLvN,KAAM,GACNmI,UAAW,GACXkP,SAAS,IATU,mBAEhBrY,EAFgB,KAEV4M,EAFU,KAajBI,EADYF,a5CoBY,SAACtE,GAAD,OAAWA,EAAMW,UAAUhB,Y4CnBzB/F,KAAI,SAAC6K,GAAD,MAAQ,CACxCnM,MAAOmM,EAAEjM,KACTP,MAAOwM,EAAE3K,QAIP8K,EAFcN,a1CsBY,SAACtE,GAAD,OAAWA,EAAM0E,YAAY/E,Y0CpBzB/F,KAAI,SAACiL,GAAD,MAAQ,CAC5CvM,MAAOuM,EAAErM,KACTP,MAAO4M,EAAE/K,QArBU,EAuBKpB,mBAAS,IAvBd,mBAuBhBhB,EAvBgB,KAuBRoN,EAvBQ,KAyBjB5K,EAAe,SAAClB,GAClBoL,GAAQ,SAAClL,GAAD,mBAAC,eACFA,GADC,kBAEHF,EAAOR,KAAOQ,EAAOf,YAGxBsN,EAAkB,CACpBzI,MAAO,CACH0I,WAAY,CACRtN,QAAS,wPAEbuN,QAAS,CACLvN,QAAS,kHAGjBM,KAAM,CACFgN,WAAY,CACRtN,QAAS,yKAEbsJ,IAAK,CACDtJ,QAAS,sNACTD,MAAO,IAGf8E,SAAU,CACNyI,WAAY,CACRtN,QAAS,2LAEb4X,gBAAiB,CACb5X,QAAS,yRAEb6X,eAAgB,CACZ7X,QAAS,kOAEbsJ,IAAK,CACDtJ,QAAS,kOACTD,MAAO,IAGf6N,WAAY,CACRN,WAAY,CACRtN,QAAS,wMAGjB2X,QAAS,CACLrK,WAAY,CACRtN,QACI,ybAIhBoN,qBAAU,WACN3N,MACD,CAACH,IACJ,IAAMG,EAAW,WACb,IAAMD,EAASH,EAAUC,EAAM+N,GAE/B,OADAT,EAAUpN,GAC4B,IAA/BgC,OAAOC,KAAKjC,GAAQM,QAEzB0N,EAAyC,IAA/BhM,OAAOC,KAAKjC,GAAQM,OAapC,OACI,uBAAM2N,SAZW,SAACC,GAGlB,GAFAA,EAAEC,iBACclO,IAChB,CACA,IAAMqY,EAAO,2BACNxY,GADM,IAETmJ,UAAWnJ,EAAKmJ,UAAU/G,KAAI,SAAC6K,GAAD,OAAOA,EAAExM,WAE3CwI,ErCaJ,SAAC,GAAD,IAAG3D,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAa8O,EAAvB,mFACA,WAAOpL,GAAP,eAAA5D,EAAA,6DACI4D,EAASyC,MADb,kBAG2BvG,EAAYC,SAAS,CAAEE,QAAOC,aAHzD,OAGcvF,EAHd,OAIQyD,EAAoBC,UAAU1D,GAC9BiJ,EAAS6B,GAAmB,CAAEP,OAAQvK,EAAK6D,WAC3CoF,EACIiD,GAAW,aACP5J,IAAKtC,EAAK6D,QACVyB,QACA0J,KAAMjF,GAAU,EAAG,GACnB2I,kBAAmB3I,GAAU,EAAG,KAChCwB,UAAW,GACXsD,MAAM,8CAAD,QACD3E,KAAKE,SAAW,GAEf6J,SAAS,IACTwE,UAAU,GAJV,SAKFpE,KAlBnB,kDAsBQpL,EAAS8B,GAAkB,KAAMrK,UAtBzC,0DADA,sDqCbagY,CAAOF,MAIhB,UACI,cAAC,EAAD,CACI1X,MAAM,oGACNE,KAAK,QACLP,MAAOT,EAAKsF,MACZrE,SAAUyB,EACV9B,MAAOV,EAAOoF,QAElB,cAAC,EAAD,CACIxE,MAAM,qBACNE,KAAK,OACLP,MAAOT,EAAKgB,KACZC,SAAUyB,EACV9B,MAAOV,EAAOc,OAElB,cAAC,EAAD,CACIF,MAAM,uCACNC,KAAK,WACLC,KAAK,WACLP,MAAOT,EAAKuF,SACZtE,SAAUyB,EACV9B,MAAOV,EAAOqF,WAElB,cAAC,EAAD,CACIzE,MAAM,uHACNe,cAAc,sDACdb,KAAK,aACLc,QAASsL,EACTnM,SAAUyB,EACVjC,MAAOT,EAAKsO,WACZ1N,MAAOV,EAAOoO,aAElB,cAAC,EAAD,CACIxM,QAAS,CACL,CAAEd,KAAM,OAAQP,MAAO,QACvB,CAAEO,KAAM,SAAUP,MAAO,UACzB,CAAEO,KAAM,QAASP,MAAO,UAE5BA,MAAOT,EAAKuO,IACZvN,KAAK,MACLC,SAAUyB,EACV5B,MAAM,2FAEV,cAAC,EAAD,CACIgB,QAASkL,EACT/L,SAAUyB,EACV1B,KAAK,YACLF,MAAM,+HAEV,eAAC,GAAD,CACIL,MAAOT,EAAKqY,QACZpX,SAAUyB,EACV1B,KAAK,UACLJ,MAAOV,EAAOmY,QAJlB,gFAMgB,yKAEhB,wBACItX,KAAK,SACLwB,UAAW2L,EACX7M,UAAU,gCAHd,wECrHGsX,GA7CD,WAAO,IACT5X,EAASsR,cAATtR,KADQ,EAEgBG,mBACnB,aAATH,EAAsBA,EAAO,SAHjB,mBAET6X,EAFS,KAECC,EAFD,KAKVC,EAAiB,SAAC/T,GACpB8T,GAAY,SAACnX,GAAD,MACM,aAAdA,EAA2B,QAAU,eAI7C,OACI,qBAAKL,UAAU,iBAAf,SACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,kCAAf,SACkB,aAAbuX,EACG,qCACI,oBAAIvX,UAAU,OAAd,gFACA,cAAC,GAAD,IACA,qGACkB,IACd,oBAAG0N,KAAK,SAAStN,QAASqX,EAA1B,UACK,IADL,0CAOR,qCACI,oBAAIzX,UAAU,OAAd,sCACA,cAAC,GAAD,IACA,qGACkB,IACd,oBAAG0N,KAAK,SAAStN,QAASqX,EAA1B,UACK,IADL,qFClBjBC,GAjBF,WACT,OACI,qBAAK1X,UAAU,wBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,2IACA,mBAAGA,UAAU,YAAb,yWAIA,cAAC,KAAD,CAAMuU,GAAI,SAAUvU,UAAU,kBAA9B,kDCyBD2X,GAjCI,WACf,IAAMnM,EAAcC,axCiMgB,SAACtE,GACrC,OAAOA,EAAM8D,MAAMnE,SACbK,EAAM8D,MAAMnE,SAASoE,MAAK,SAACnB,GAAD,OAAOA,EAAE9I,MAAQkG,EAAM8D,MAAMzF,KAAK0D,UAC5D,QwCrMe,EAEKrJ,oBAAS,GAFd,mBAEd+X,EAFc,KAENC,EAFM,KAMrB,OAAKrM,EAED,sBAAKxL,UAAU,WAAWI,QALX,WACfyX,GAAQ,SAACxX,GAAD,OAAgBA,MAIxB,UACI,sBAAKL,UAAU,gDAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBwL,EAAY7L,OACnC,qBACI4N,IAAK/B,EAAYgC,MACjB0B,IAAI,GACJC,OAAO,KACPnP,UAAU,qCAGlB,sBAAKA,UAAW,uBAAyB4X,EAAS,QAAU,IAA5D,UACI,cAAC,KAAD,CACIrD,GAAE,iBAAY/I,EAAYvK,KAC1BjB,UAAU,gBAFd,wDAMA,cAAC,KAAD,CAAMuU,GAAG,UAAUvU,UAAU,gBAA7B,kDAnBa,cCoCd8X,GAzCA,WACX,IAAM3O,EAAasC,azC2MY,SAACtE,GAAD,OAAWA,EAAM8D,MAAM9B,cyC1MtD,OACI,qBAAKnJ,UAAU,uBAAf,SACI,sBAAKA,UAAU,kBAAf,UACI,qBAAIA,UAAU,MAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,KAAD,CAAMA,UAAU,YAAY+X,eAAa,OAAOxD,GAAG,IAAnD,0DAIHpL,GACG,oBAAInJ,UAAU,WAAd,SACI,cAAC,KAAD,CACIA,UAAU,YACV+X,eAAa,OACbxD,GAAG,SAHP,2FAUZ,qBAAKvU,UAAU,SAAf,SACKmJ,EACG,cAAC,GAAD,IAEA,cAAC,KAAD,CACInJ,UAAU,YACV+X,eAAa,OACbxD,GAAG,SAHP,oDCKTyD,GAhCQ,SAAC,GAAiD,IAApCC,EAAmC,EAA9C5E,UAAsBW,EAAwB,EAAxBA,SAAahB,EAAW,yCAC9D7J,EAAasC,a1C2MY,SAACtE,GAAD,OAAWA,EAAM8D,MAAM9B,c0C1MtD,OACI,cAAC,IAAD,2BACQ6J,GADR,IAEIkF,OAAQ,SAACC,GACL,OAAKhP,EAYE8O,EAAY,cAACA,EAAD,eAAeE,IAAYnE,EAVtC,cAAC,IAAD,CACIO,GAAI,CACAjH,SAAU,SACVnG,MAAO,CACHyP,KAAMuB,EAAM9K,kBCNjC+K,GARA,WACX,IAAMxQ,EAAWyD,cAIjB,OAHAoB,qBAAU,WACN7E,G3C4IoB,SAACA,GACzBxF,EAAoBgB,iBACpBwE,EAASwC,MACTvI,GAAQ+H,KAAK,U2C9IV,IACI,0CCEX,SAASyO,GAAT,GAAkC,IAAbrE,EAAY,EAAZA,SACXpM,EAAWyD,cACXlC,EAAasC,a5CqMY,SAACtE,GAAD,OAAWA,EAAM8D,MAAM9B,c4CpMhDmP,EAAqB7M,a5CuMY,SAACtE,GAAD,OAAWA,EAAM8D,MAAMlE,a4C/L9D,OAPA0F,qBAAU,WACN7E,EAASD,KACTC,EjDsB2B,uCAAM,WAAOA,EAAUC,GAAjB,iBAAA7D,EAAA,yDAPrB0C,EAQMmB,IAAWgE,YAAzB7E,YAPJrE,KAAKwC,MAAQuB,EAAO,KAMa,wBAGjCkB,EAASM,MAHwB,kBAKHH,EAAkB5B,MALf,gBAKrBN,EALqB,EAKrBA,QACR+B,EAASO,GAAmBtC,IANC,kDAQ7B+B,EAASQ,GAAwB,KAAM/I,UARV,kCAPzC,IAAoBqH,IAOqB,qBAAN,yDiDrBvByC,GACAvB,EAASmD,QAEd,CAAC5B,IACAmP,EAA2B,aACxBtE,EAGXqE,GAAUrC,UAAY,CAClBhC,SAAUiC,KAAUC,UAAU,CAC1BD,KAAUE,QAAQF,KAAUG,MAC5BH,KAAUG,QAGHiC,UCGAE,OAtBf,WACI,OACI,gCACI,eAAC,GAAD,WACI,cAAC,GAAD,IAEA,eAAC,IAAD,WACI,cAAC,GAAD,CACIjF,KAAK,yBACLD,UAAWgD,KAEf,cAAC,IAAD,CAAO/C,KAAK,gBAAgBD,UAAWiE,KACvC,cAAC,IAAD,CAAOhE,KAAK,UAAUD,UAAW+E,KACjC,cAAC,IAAD,CAAO9E,KAAK,IAAIkF,OAAK,EAACnF,UAAWqE,KACjC,cAAC,IAAD,CAAUnD,GAAG,YAGrB,cAAC,IAAD,Q,GCxBgCkE,EAAQ,IAA5CC,G,GAAAA,gBAAiBC,G,GAAAA,eAEnBC,GAAcF,GAAgB,CAChC5Q,UAAWN,EACXqE,YAAaxD,GACb4C,MAAOX,GACP+E,SAAUuB,KCAd,IAAMiI,GDIKF,GAAe,CAClBlR,QAASmR,KCHjBE,IAASZ,OACL,cAAC,IAAMa,WAAP,UACI,cAAC,IAAD,CAAUF,MAAOA,GAAjB,SACI,cAAC,IAAD,CAAQhX,QAASA,GAAjB,SACI,cAAC,GAAD,UAIZmX,SAASC,eAAe,SAM5Bhb,K","file":"static/js/main.54bfe3c4.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","export function validator(data, config) {\n    const errors = {};\n    function validate(validateMethod, data, config) {\n        let statusValidate;\n        switch (validateMethod) {\n            case \"isRequired\": {\n                if (typeof data === \"boolean\") {\n                    statusValidate = !data;\n                } else {\n                    statusValidate = data.trim() === \"\";\n                }\n                break;\n            }\n            case \"isEmail\": {\n                const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n                statusValidate = !emailRegExp.test(data);\n                break;\n            }\n            case \"isCapitalSymbol\": {\n                const capitalRegExp = /[A-Z]+/g;\n                statusValidate = !capitalRegExp.test(data);\n                break;\n            }\n            case \"isContainDigit\": {\n                const digitRegExp = /\\d+/g;\n                statusValidate = !digitRegExp.test(data);\n                break;\n            }\n            case \"min\": {\n                statusValidate = data.length < config.value;\n                break;\n            }\n            default:\n                break;\n        }\n        if (statusValidate) return config.message;\n    }\n    for (const fieldName in data) {\n        for (const validateMethod in config[fieldName]) {\n            const error = validate(\n                validateMethod,\n                data[fieldName],\n                config[fieldName][validateMethod]\n            );\n            if (error && !errors[fieldName]) {\n                errors[fieldName] = error;\n            }\n        }\n    }\n    return errors;\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextField = ({ label, type, name, value, onChange, error }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n    const toggleShowPassword = () => {\n        setShowPassword((prevState) => !prevState);\n    };\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}> {label}</label>\n            <div className=\"input-group has-validation\">\n                <input\n                    type={showPassword ? \"text\" : type}\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n\n                {type === \"password\" && (\n                    <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={toggleShowPassword}\n                    >\n                        <i\n                            className={\n                                \"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")\n                            }\n                        ></i>\n                    </button>\n                )}\n                {error && <div className=\"invalid-feedback \">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextField.defaultProps = {\n    type: \"text\"\n};\nTextField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SelectField = ({\n    label,\n    value,\n    onChange,\n    defaultOption,\n    options,\n    error,\n    name\n}) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-select\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((optionName) => ({\n                  name: options[optionName].name,\n                  value: options[optionName]._id\n              }))\n            : options;\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor=\"validationCustom04\" className=\"form-label\">\n                {label}\n            </label>\n            <select\n                className={getInputClasses()}\n                id=\"validationCustom04\"\n                name={name}\n                value={value}\n                onChange={handleChange}\n            >\n                <option disabled value=\"\">\n                    {defaultOption}\n                </option>\n                {optionsArray &&\n                    optionsArray.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n            </select>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\nSelectField.propTypes = {\n    defaultOption: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string,\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    name: PropTypes.string\n};\n\nexport default SelectField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst RadioField = ({ options, name, onChange, value, label }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <div>\n                {options.map((option) => (\n                    <div\n                        key={option.name + \"_\" + option.value}\n                        className=\"form-check form-check-inline\"\n                    >\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name={name}\n                            id={option.name + \"_\" + option.value}\n                            checked={option.value === value}\n                            value={option.value}\n                            onChange={handleChange}\n                        />\n                        <label\n                            className=\"form-check-label\"\n                            htmlFor={option.name + \"_\" + option.value}\n                        >\n                            {option.name}\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nRadioField.propTypes = {\n    options: PropTypes.array,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    label: PropTypes.string\n};\n\nexport default RadioField;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport PropTypes from \"prop-types\";\n\nconst MultiSelectField = ({ options, onChange, name, label, defaultValue }) => {\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((optionName) => ({\n                  label: options[optionName].name,\n                  value: options[optionName]._id\n              }))\n            : options;\n\n    const handleChange = (value) => {\n        onChange({ name: name, value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <Select\n                isMulti\n                closeMenuOnSelect={false}\n                defaultValue={defaultValue}\n                options={optionsArray}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                onChange={handleChange}\n                name={name}\n            />\n        </div>\n    );\n};\nMultiSelectField.propTypes = {\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    defaultValue: PropTypes.array\n};\n\nexport default MultiSelectField;\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nconst BackHistoryButton = () => {\n    const history = useHistory();\n    return (\n        <button className=\"btn btn-primary\" onClick={() => history.goBack()}>\n            <i className=\"bi bi-caret-left\"></i>\n            Назад\n        </button>\n    );\n};\n\nexport default BackHistoryButton;\n","const TOKEN_KEY = \"jwt-token\";\nconst REFRESH_KEY = \"jwt-refresh-token\";\nconst EXPIRES_KEY = \"jwt-expires\";\nconst USERID_KEY = \"user-local-id\";\n\nexport function setTokens({\n    refreshToken,\n    idToken,\n    localId,\n    expiresIn = 3600\n}) {\n    const expiresDate = new Date().getTime() + expiresIn * 1000;\n    localStorage.setItem(USERID_KEY, localId);\n    localStorage.setItem(TOKEN_KEY, idToken);\n    localStorage.setItem(REFRESH_KEY, refreshToken);\n    localStorage.setItem(EXPIRES_KEY, expiresDate);\n}\nexport function getAccessToken() {\n    return localStorage.getItem(TOKEN_KEY);\n}\nexport function getRefreshToken() {\n    return localStorage.getItem(REFRESH_KEY);\n}\nexport function removeAuthData() {\n    localStorage.removeItem(USERID_KEY);\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_KEY);\n    localStorage.removeItem(EXPIRES_KEY);\n}\n\nexport function getTokenExpiresDate() {\n    return localStorage.getItem(EXPIRES_KEY);\n}\nexport function getUserId() {\n    return localStorage.getItem(USERID_KEY);\n}\nconst localStorageService = {\n    setTokens,\n    getAccessToken,\n    getRefreshToken,\n    getTokenExpiresDate,\n    getUserId,\n    removeAuthData\n};\nexport default localStorageService;\n","import axios from \"axios\";\nimport localStorageService from \"./localStorage.service\";\n\nconst httpAuth = axios.create({\n    baseURL: \"https://identitytoolkit.googleapis.com/v1/\",\n    params: {\n        key: process.env.REACT_APP_FIREBASE_KEY\n    }\n});\n\nconst authService = {\n    register: async ({ email, password }) => {\n        const { data } = await httpAuth.post(`accounts:signUp`, {\n            email,\n            password,\n            returnSecureToken: true\n        });\n        return data;\n    },\n    login: async ({ email, password }) => {\n        const { data } = await httpAuth.post(`accounts:signInWithPassword`, {\n            email,\n            password,\n            returnSecureToken: true\n        });\n        return data;\n    },\n    refresh: async () => {\n        const { data } = await httpAuth.post(\"token\", {\n            grant_type: \"refresh_token\",\n            refresh_token: localStorageService.getRefreshToken()\n        });\n        return data;\n    }\n};\nexport default authService;\n","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport configFile from \"../config.json\";\r\n\r\nimport localStorageService from \"./localStorage.service\";\r\nimport authService from \"./auth.service\";\r\n\r\nconst http = axios.create({\r\n    baseURL: configFile.apiEndpoint\r\n});\r\n\r\nhttp.interceptors.request.use(\r\n    async function (config) {\r\n        if (configFile.isFireBase) {\r\n            const containSlash = /\\/$/gi.test(config.url);\r\n            config.url =\r\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\r\n            const expiresDate = localStorageService.getTokenExpiresDate();\r\n            const refreshToken = localStorageService.getRefreshToken();\r\n            if (refreshToken && expiresDate < Date.now()) {\r\n                const data = await authService.refresh();\r\n\r\n                localStorageService.setTokens({\r\n                    refreshToken: data.refresh_token,\r\n                    idToken: data.id_token,\r\n                    expiresIn: data.expires_in,\r\n                    localId: data.user_id\r\n                });\r\n            }\r\n            const accessToken = localStorageService.getAccessToken();\r\n            if (accessToken) {\r\n                config.params = { ...config.params, auth: accessToken };\r\n            }\r\n        }\r\n        return config;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\nfunction transormData(data) {\r\n    return data && !data._id\r\n        ? Object.keys(data).map((key) => ({\r\n              ...data[key]\r\n          }))\r\n        : data;\r\n}\r\nhttp.interceptors.response.use(\r\n    (res) => {\r\n        if (configFile.isFireBase) {\r\n            res.data = { content: transormData(res.data) };\r\n        }\r\n        return res;\r\n    },\r\n    function (error) {\r\n        const expectedErrors =\r\n            error.response &&\r\n            error.response.status >= 400 &&\r\n            error.response.status < 500;\r\n\r\n        if (!expectedErrors) {\r\n            console.log(error);\r\n            toast.error(\"Somthing was wrong. Try it later\");\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\nconst httpService = {\r\n    get: http.get,\r\n    post: http.post,\r\n    put: http.put,\r\n    delete: http.delete,\r\n    patch: http.patch\r\n};\r\nexport default httpService;\r\n","import httpService from \"./http.service\";\nconst qualityEndpoint = \"quality/\";\n\nconst qualityService = {\n    fetchAll: async () => {\n        const { data } = await httpService.get(qualityEndpoint);\n        return data;\n    }\n};\nexport default qualityService;\n","function isOutdated(date) {\n    if (Date.now() - date > 10 * 60 * 100) {\n        return true;\n    }\n    return false;\n}\nexport default isOutdated;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport qualityService from \"../services/qaulity.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst qualitiesSlice = createSlice({\n    name: \"qualities\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        qualitiesRequested: (state) => {\n            state.isLoading = true;\n        },\n        qualitiesReceved: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        qualitiesRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: qualitiesReducer, actions } = qualitiesSlice;\nconst { qualitiesRequested, qualitiesReceved, qualitiesRequestFiled } = actions;\n\nexport const loadQualitiesList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().qualities;\n    if (isOutdated(lastFetch)) {\n        dispatch(qualitiesRequested());\n        try {\n            const { content } = await qualityService.fetchAll();\n            dispatch(qualitiesReceved(content));\n        } catch (error) {\n            dispatch(qualitiesRequestFiled(error.message));\n        }\n    }\n};\n\nexport const getQualities = () => (state) => state.qualities.entities;\nexport const getQualitiesLoadingStatus = () => (state) =>\n    state.qualities.isLoading;\nexport const getQulitiesByIds = (qualitiesIds) => (state) => {\n    if (qualitiesIds && state.qualities.entities) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of state.qualities.entities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    return [];\n};\n\nexport default qualitiesReducer;\n","import httpService from \"./http.service\";\n\nconst professionEndpoint = \"profession/\";\n\nconst professionService = {\n    get: async () => {\n        const req = await httpService.get(professionEndpoint);\n        return req.data;\n    }\n};\nexport default professionService;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport professionService from \"../services/profession.service\";\r\n\r\nconst professionsSlice = createSlice({\r\n    name: \"professions\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null,\r\n        lastFetch: null\r\n    },\r\n    reducers: {\r\n        professionsRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        professionsReceved: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.lastFetch = Date.now();\r\n            state.isLoading = false;\r\n        },\r\n        professionsRequestFiled: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { reducer: professionsReducer, actions } = professionsSlice;\r\nconst { professionsRequested, professionsReceved, professionsRequestFiled } =\r\n    actions;\r\n\r\nfunction isOutdated(date) {\r\n    if (Date.now() - date > 10 * 60 * 1000) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const loadProfessionsList = () => async (dispatch, getState) => {\r\n    const { lastFetch } = getState().professions;\r\n    if (isOutdated(lastFetch)) {\r\n        dispatch(professionsRequested());\r\n        try {\r\n            const { content } = await professionService.get();\r\n            dispatch(professionsReceved(content));\r\n        } catch (error) {\r\n            dispatch(professionsRequestFiled(error.message));\r\n        }\r\n    }\r\n};\r\n\r\nexport const getProfessions = () => (state) => state.professions.entities;\r\nexport const getProfessionsLoadingStatus = () => (state) =>\r\n    state.professions.isLoading;\r\nexport const getProfessionById = (id) => (state) => {\r\n    if (state.professions.entities) {\r\n        for (const profession of state.professions.entities) {\r\n            if (profession._id === id) {\r\n                return profession;\r\n            }\r\n        }\r\n    }\r\n    return {};\r\n};\r\n\r\nexport default professionsReducer;\r\n","import httpService from \"./http.service\";\nimport localStorageService from \"./localStorage.service\";\n\nconst userEndpoint = \"user/\";\n\nconst userService = {\n    get: async () => {\n        const { data } = await httpService.get(userEndpoint);\n        return data;\n    },\n    create: async (payload) => {\n        const { data } = await httpService.put(\n            userEndpoint + payload._id,\n            payload\n        );\n        return data;\n    },\n    getCurrentUser: async () => {\n        const { data } = await httpService.get(\n            userEndpoint + localStorageService.getUserId()\n        );\n        return data;\n    },\n    update: async (payload) => {\n        const { data } = await httpService.patch(\n            userEndpoint + localStorageService.getUserId(),\n            payload\n        );\n        return data;\n    }\n};\nexport default userService;\n","export function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\nexport default history;\n","export function generateAuthError(message) {\r\n    switch (message) {\r\n        case \"INVALID_PASSWORD\":\r\n            return \"Email или пароль введены некорректно\";\r\n        case \"EMAIL_EXISTS\":\r\n            return \"Пользователь с таким Email уже существует\";\r\n\r\n        default:\r\n            return \"Слишком много попыток входа. Попробуйте позднее\";\r\n    }\r\n}\r\n","import { createSlice, createAction } from \"@reduxjs/toolkit\";\nimport userService from \"../services/user.service\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport { randomInt } from \"../utils/randomInt\";\nimport history from \"../utils/history\";\nimport { generateAuthError } from \"../utils/generateAuthError\";\n\nconst initialState = localStorageService.getAccessToken()\n    ? {\n          entities: null,\n          isLoading: true,\n          error: null,\n          auth: { userId: localStorageService.getUserId() },\n          isLoggedIn: true,\n          dataLoaded: false\n      }\n    : {\n          entities: null,\n          isLoading: false,\n          error: null,\n          auth: null,\n          isLoggedIn: false,\n          dataLoaded: false\n      };\nconst usersSlice = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {\n        usersRequested: (state) => {\n            state.isLoading = true;\n        },\n        usersReceved: (state, action) => {\n            state.entities = action.payload;\n            state.dataLoaded = true;\n            state.isLoading = false;\n        },\n        usersRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        authRequestSuccess: (state, action) => {\n            state.auth = action.payload;\n            state.isLoggedIn = true;\n        },\n        authRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        userCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        userUpdated: (state, action) => {\n            state.entities[\n                state.entities.findIndex((u) => u._id === action.payload._id)\n            ] = action.payload;\n        },\n        userBookmarkUpdated: (state, action) => {\n            const userIndex = state.entities.findIndex(\n                (u) => u._id === action.payload._id\n            );\n            state.entities[userIndex].bookmarks = action.payload.bookmarks;\n        },\n        userBookmarkUpdateFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        userLoggedOut: (state) => {\n            state.entities = null;\n            state.isLoggedIn = false;\n            state.auth = null;\n            state.dataLoaded = false;\n        },\n        authRequested: (state) => {\n            state.error = null;\n        }\n    }\n});\nconst { reducer: usersReducer, actions } = usersSlice;\nconst {\n    usersRequested,\n    usersReceved,\n    usersRequestFiled,\n    authRequestSuccess,\n    authRequestFailed,\n    userCreated,\n    userUpdated,\n    userBookmarkUpdated,\n    userBookmarkUpdateFailed,\n    userLoggedOut\n} = actions;\n\nconst authRequested = createAction(\"users/authRequested\");\nconst userCreateRequested = createAction(\"users/userCreateRequested\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\nconst userBookmarkUpdateRequested = createAction(\n    \"users/userBookmarkUpdateRequested\"\n);\nconst createUpdateFailed = createAction(\"users/createUpdateFailed\");\nconst createUserFailed = createAction(\"users/createUserFailed\");\nexport const login =\n    ({ payload, redirect }) =>\n    async (dispatch) => {\n        const { email, password } = payload;\n        dispatch(authRequested());\n        try {\n            const data = await authService.login({ email, password });\n            dispatch(authRequestSuccess({ userId: data.localId }));\n            localStorageService.setTokens(data);\n            history.push(redirect);\n        } catch (error) {\n            const { code, message } = error.response.data.error;\n            if (code === 400) {\n                const errorMessage = generateAuthError(message);\n                dispatch(authRequestFailed(errorMessage));\n            } else {\n                dispatch(authRequestFailed(error.message));\n            }\n        }\n    };\nexport const signUp =\n    ({ email, password, ...rest }) =>\n    async (dispatch) => {\n        dispatch(authRequested());\n        try {\n            const data = await authService.register({ email, password });\n            localStorageService.setTokens(data);\n            dispatch(authRequestSuccess({ userId: data.localId }));\n            dispatch(\n                createUser({\n                    _id: data.localId,\n                    email,\n                    rate: randomInt(1, 5),\n                    completedMeetings: randomInt(0, 200),\n                    bookmarks: [],\n                    image: `https://avatars.dicebear.com/api/avataaars/${(\n                        Math.random() + 1\n                    )\n                        .toString(36)\n                        .substring(7)}.svg`,\n                    ...rest\n                })\n            );\n        } catch (error) {\n            dispatch(authRequestFailed(error.message));\n        }\n    };\n\nexport const logOut = () => (dispatch) => {\n    localStorageService.removeAuthData();\n    dispatch(userLoggedOut());\n    history.push(\"/\");\n};\n\nfunction createUser(payload) {\n    return async function (dispatch) {\n        dispatch(userCreateRequested());\n        try {\n            const { content } = await userService.create(payload);\n            dispatch(userCreated(content));\n            history.push(\"/users\");\n        } catch (error) {\n            dispatch(createUserFailed(error.message));\n        }\n    };\n}\n\nexport function updateUserData(payload) {\n    return async function (dispatch) {\n        dispatch(userUpdateRequested());\n        try {\n            const { content } = await userService.update(payload);\n            dispatch(userUpdated(content));\n            history.push(`/users/${content._id}`);\n        } catch (error) {\n            dispatch(createUpdateFailed(error.message));\n        }\n    };\n}\nexport function updateBookmarks(payload) {\n    return async function (dispatch) {\n        dispatch(userBookmarkUpdateRequested());\n        try {\n            const { content } = await userService.update(payload);\n            dispatch(userBookmarkUpdated(content));\n        } catch (error) {\n            dispatch(userBookmarkUpdateFailed(error.message));\n        }\n    };\n}\nexport const loadUsersList = () => async (dispatch) => {\n    dispatch(usersRequested());\n    try {\n        const { content } = await userService.get();\n        dispatch(usersReceved(content));\n    } catch (error) {\n        dispatch(usersRequestFiled(error.message));\n    }\n};\nexport const getUsersList = () => (state) => state.users.entities;\nexport const getCurrentUserData = () => (state) => {\n    return state.users.entities\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\n        : null;\n};\nexport const getUserById = (userId) => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find((u) => u._id === userId);\n    }\n};\n\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\nexport const getAuthErrors = () => (state) => state.users.error;\nexport default usersReducer;\n","import EditUserPage from \"./editUserPage\";\nexport default EditUserPage;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../../utils/validator\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radio.Field\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getQualities,\n    getQualitiesLoadingStatus\n} from \"../../../store/qualities\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { getCurrentUserData, updateUserData } from \"../../../store/users\";\n\nconst EditUserPage = () => {\n    const dispatch = useDispatch();\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState();\n    const currentUser = useSelector(getCurrentUserData());\n    const qualities = useSelector(getQualities());\n    const qualitiesLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n    const professionLoading = useSelector(getProfessionsLoadingStatus());\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n    const [errors, setErrors] = useState({});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        dispatch(\n            updateUserData({\n                ...data,\n                qualities: data.qualities.map((q) => q.value)\n            })\n        );\n    };\n    function getQualitiesListByIds(qualitiesIds) {\n        const qualitiesArray = [];\n        if (qualitiesIds) {\n            for (const qualId of qualitiesIds) {\n                for (const quality of qualities) {\n                    if (quality._id === qualId) {\n                        qualitiesArray.push(quality);\n                        break;\n                    }\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    const transformData = (data) => {\n        const result = getQualitiesListByIds(data).map((qual) => ({\n            label: qual.name,\n            value: qual._id\n        }));\n\n        return result;\n    };\n    useEffect(() => {\n        if (!professionLoading && !qualitiesLoading && currentUser && !data) {\n            setData({\n                ...currentUser,\n                qualities: transformData(currentUser.qualities)\n            });\n        }\n    }, [professionLoading, qualitiesLoading, currentUser, data]);\n    useEffect(() => {\n        if (data && isLoading) {\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n\n        name: {\n            isRequired: {\n                message: \"Введите ваше имя\"\n            }\n        }\n    };\n    useEffect(() => validate(), [data]);\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n    return (\n        <div className=\"container mt-5\">\n            <BackHistoryButton />\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {!isLoading && Object.keys(professions).length > 0 ? (\n                        <form onSubmit={handleSubmit}>\n                            <TextField\n                                label=\"Имя\"\n                                name=\"name\"\n                                value={data.name}\n                                onChange={handleChange}\n                                error={errors.name}\n                            />\n                            <TextField\n                                label=\"Электронная почта\"\n                                name=\"email\"\n                                value={data.email}\n                                onChange={handleChange}\n                                error={errors.email}\n                            />\n                            <SelectField\n                                label=\"Выбери свою профессию\"\n                                defaultOption=\"Choose...\"\n                                name=\"profession\"\n                                options={professionsList}\n                                onChange={handleChange}\n                                value={data.profession}\n                                error={errors.profession}\n                            />\n                            <RadioField\n                                options={[\n                                    { name: \"Male\", value: \"male\" },\n                                    { name: \"Female\", value: \"female\" },\n                                    { name: \"Other\", value: \"other\" }\n                                ]}\n                                value={data.sex}\n                                name=\"sex\"\n                                onChange={handleChange}\n                                label=\"Выберите ваш пол\"\n                            />\n                            <MultiSelectField\n                                defaultValue={data.qualities}\n                                options={qualitiesList}\n                                onChange={handleChange}\n                                name=\"qualities\"\n                                label=\"Выберите ваши качества\"\n                            />\n                            <button\n                                type=\"submit\"\n                                disabled={!isValid}\n                                className=\"btn btn-primary w-100 mx-auto\"\n                            >\n                                Обновить\n                            </button>\n                        </form>\n                    ) : (\n                        \"Loading...\"\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditUserPage;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCurrentUserData } from \"../../store/users\";\r\nconst UserCard = ({ user }) => {\r\n    const history = useHistory();\r\n    const currentUser = useSelector(getCurrentUserData());\r\n    const handleClick = () => {\r\n        history.push(history.location.pathname + \"/edit\");\r\n    };\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body\">\r\n                {currentUser._id === user._id && (\r\n                    <button\r\n                        className=\"position-absolute top-0 end-0 btn btn-light btn-sm\"\r\n                        onClick={handleClick}\r\n                    >\r\n                        <i className=\"bi bi-gear\"></i>\r\n                    </button>\r\n                )}\r\n\r\n                <div className=\"d-flex flex-column align-items-center text-center position-relative\">\r\n                    <img\r\n                        src={user.image}\r\n                        className=\"rounded-circle\"\r\n                        width=\"150\"\r\n                    />\r\n                    <div className=\"mt-3\">\r\n                        <h4>{user.name}</h4>\r\n                        <p className=\"text-secondary mb-1\">\r\n                            {user.profession.name}\r\n                        </p>\r\n                        <div className=\"text-muted\">\r\n                            <i\r\n                                className=\"bi bi-caret-down-fill text-primary\"\r\n                                role=\"button\"\r\n                            ></i>\r\n                            <i\r\n                                className=\"bi bi-caret-up text-secondary\"\r\n                                role=\"button\"\r\n                            ></i>\r\n                            <span className=\"ms-2\">{user.rate}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nUserCard.propTypes = {\r\n    user: PropTypes.object\r\n};\r\n\r\nexport default UserCard;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Quality = ({ _id, color, name }) => {\n    return (\n        <span className={\"badge m-1 bg-\" + color} key={_id}>\n            {name}\n        </span>\n    );\n    // return \"something\";\n};\nQuality.propTypes = {\n    _id: PropTypes.string.isRequired,\n    color: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default Quality;\n","import Qualities from \"./qualitiesList\";\nexport default Qualities;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Quality from \"./quality\";\nimport {\n    getQualitiesLoadingStatus,\n    getQulitiesByIds,\n    loadQualitiesList\n} from \"../../../store/qualities\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst QualitiesList = ({ qualities }) => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = useSelector(getQulitiesByIds(qualities));\n    useEffect(() => {\n        dispatch(loadQualitiesList());\n    }, []);\n\n    if (isLoading) return \"Loadind ...\";\n\n    return (\n        <>\n            {qualitiesList.map((qual) => (\n                <Quality key={qual._id} {...qual} />\n            ))}\n        </>\n    );\n};\n\nQualitiesList.propTypes = {\n    qualities: PropTypes.array\n};\n\nexport default QualitiesList;\n","import React from \"react\";\nimport Qualities from \"./qualities\";\nimport PropTypes from \"prop-types\";\n\nconst QualitiesCard = ({ data }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Качества</span>\n                </h5>\n                <p className=\"card-text\">\n                    <Qualities qualities={data} />\n                </p>\n            </div>\n        </div>\n    );\n};\nQualitiesCard.propTypes = {\n    data: PropTypes.array\n};\n\nexport default QualitiesCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst MeetingsCard = ({ value }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Количество встреч</span>\n                </h5>\n\n                <h1 className=\"display-1\">{value}</h1>\n            </div>\n        </div>\n    );\n};\nMeetingsCard.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nexport default MeetingsCard;\n","export function displayDate(data) {\n    const date = new Date(parseInt(data));\n    const dateNow = new Date();\n    const yearDif = dateNow.getFullYear() - date.getFullYear();\n    if (yearDif === 0) {\n        const dayDif = dateNow.getDay() - date.getDay();\n        if (dayDif === 0) {\n            const hourDif = dateNow.getHours() - date.getHours();\n            if (hourDif === 0) {\n                const minutesDif = dateNow.getMinutes() - date.getMinutes();\n\n                if (minutesDif >= 0 && minutesDif < 5) return \"1 минуту назад\";\n                if (minutesDif >= 5 && minutesDif < 10) return \"5 минут назад\";\n                if (minutesDif >= 10 && minutesDif < 30) {\n                    return \"10 минут назад\";\n                }\n                return \"30 минут назад\";\n            }\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }\n\n        return `${date.getDay()} ${date.toLocaleString(\"default\", {\n            month: \"long\"\n        })}`;\n    }\n    return (\n        date.getFullYear() + \".\" + (date.getMonth() + 1) + \"_\" + date.getDate()\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { displayDate } from \"../../../utils/displayDate\";\nimport { getCurrentUserId, getUserById } from \"../../../store/users\";\nimport { useSelector } from \"react-redux\";\nconst Comment = ({\n    content,\n    created_at: created,\n    _id: id,\n    userId,\n    onRemove\n}) => {\n    const currentUserId = useSelector(getCurrentUserId());\n    const user = useSelector(getUserById(userId));\n\n    return (\n        <div className=\"bg-light card-body  mb-3\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"d-flex flex-start \">\n                        <img\n                            src={user.image}\n                            className=\"rounded-circle shadow-1-strong me-3\"\n                            alt=\"avatar\"\n                            width=\"65\"\n                            height=\"65\"\n                        />\n                        <div className=\"flex-grow-1 flex-shrink-1\">\n                            <div className=\"mb-4\">\n                                <div className=\"d-flex justify-content-between align-items-center\">\n                                    <p className=\"mb-1 \">\n                                        {user && user.name}{\" \"}\n                                        <span className=\"small\">\n                                            - {displayDate(created)}\n                                        </span>\n                                    </p>\n                                    {currentUserId === userId && (\n                                        <button\n                                            className=\"btn btn-sm text-primary d-flex align-items-center\"\n                                            onClick={() => onRemove(id)}\n                                        >\n                                            <i className=\"bi bi-x-lg\"></i>\n                                        </button>\n                                    )}\n                                </div>\n                                <p className=\"small mb-0\">{content}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nComment.propTypes = {\n    content: PropTypes.string,\n    edited_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    created_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    userId: PropTypes.string,\n    onRemove: PropTypes.func,\n    _id: PropTypes.string\n};\n\nexport default Comment;\n","import React from \"react\";\n\nimport Comment from \"./comment\";\nimport PropTypes from \"prop-types\";\nconst CommentsList = ({ comments, onRemove }) => {\n    return comments.map((comment) => (\n        <Comment key={comment._id} {...comment} onRemove={onRemove} />\n    ));\n};\nCommentsList.propTypes = {\n    comment: PropTypes.array,\n    onRemove: PropTypes.func\n};\n\nexport default CommentsList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextAreaField = ({ label, name, value, onChange, error }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}> {label}</label>\n            <div className=\"input-group has-validation\">\n                <textarea\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n\n                {error && <div className=\"invalid-feedback \">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextAreaField.defaultProps = {\n    type: \"text\"\n};\nTextAreaField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextAreaField;\n","import React, { useState } from \"react\";\nimport TextAreaField from \"../form/textAreaField\";\nimport { validator } from \"../../../utils/validator\";\nimport PropTypes from \"prop-types\";\n\nconst AddCommentForm = ({ onSubmit }) => {\n    const [data, setData] = useState({});\n    const [errors, setErrors] = useState({});\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        content: {\n            isRequired: {\n                message: \"Сообщение не может быть пустым\"\n            }\n        }\n    };\n\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n\n    const clearForm = () => {\n        setData({});\n        setErrors({});\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        onSubmit(data);\n        clearForm();\n    };\n\n    return (\n        <div>\n            <h3>Добавить комментарий</h3>\n            <form onSubmit={handleSubmit}>\n                <TextAreaField\n                    value={data.content || \"\"}\n                    onChange={handleChange}\n                    name=\"content\"\n                    label=\"Сообщение\"\n                    error={errors.content}\n                />\n                <div className=\"d-flex justify-content-end\">\n                    <button className=\"btn btn-primary\">Опубликовать</button>\n                </div>\n            </form>\n        </div>\n    );\n};\nAddCommentForm.propTypes = {\n    onSubmit: PropTypes.func\n};\n\nexport default AddCommentForm;\n","import CommentsList from \"./commentsList\";\nimport AddCommentForm from \"./addCommentForm\";\nexport default CommentsList;\nexport { AddCommentForm };\n","import httpService from \"./http.service\";\nconst commentEndpoint = \"comment/\";\n\nconst commentService = {\n    createComment: async (payload) => {\n        const { data } = await httpService.put(\n            commentEndpoint + payload._id,\n            payload\n        );\n\n        return data;\n    },\n    getComments: async (pageId) => {\n        const { data } = await httpService.get(commentEndpoint, {\n            params: { orderBy: '\"pageId\"', equalTo: `\"${pageId}\"` }\n        });\n        return data;\n    },\n    removeComment: async (commentId) => {\n        const { data } = await httpService.delete(commentEndpoint + commentId);\n        return data;\n    }\n};\nexport default commentService;\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/commentService\";\n\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n        commentsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commentAdded: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        commentAddFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        commentDeleted: (state, action) => {\n            state.entities = state.entities.filter(\n                (c) => c._id !== action.payload\n            );\n        },\n        commentDeleteFailed: (state, action) => {\n            state.error = action.payload;\n        }\n    }\n});\n\nconst { reducer: commentsReducer, actions } = commentsSlice;\nconst {\n    commentsRequested,\n    commentsReceved,\n    commentsRequestFiled,\n    commentAdded,\n    commentAddFailed,\n    commentDeleted,\n    commentDeleteFailed\n} = actions;\n\nconst commentRequestAdd = createAction(\"comments/addRequest\");\nconst commentRequestDelete = createAction(\"comments/deleteRequest\");\n\nexport const addComment = (payload) => async (dispatch) => {\n    dispatch(commentRequestAdd());\n    try {\n        const { content } = await commentService.createComment(payload);\n        dispatch(commentAdded(content));\n    } catch (error) {\n        dispatch(commentAddFailed(error.message));\n    }\n};\nexport const deleteComment = (commentId) => async (dispatch) => {\n    dispatch(commentRequestDelete());\n    try {\n        const { content } = await commentService.removeComment(commentId);\n        if (content === null) {\n            dispatch(commentDeleted(commentId));\n        } else {\n            dispatch(commentDeleteFailed(commentId));\n        }\n    } catch (error) {\n        dispatch(commentDeleteFailed(error.message));\n    }\n};\nexport const loadCommentsList = (userId) => async (dispatch) => {\n    dispatch(commentsRequested());\n    try {\n        const { content } = await commentService.getComments(userId);\n        dispatch(commentsReceved(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const getComments = () => (state) => state.comments.entities;\nexport const getCommentsLoadingStatus = () => (state) =>\n    state.comments.isLoading;\n\nexport default commentsReducer;\n","import { orderBy } from \"lodash\";\r\nimport React, { useEffect } from \"react\";\r\nimport CommentsList, { AddCommentForm } from \"../common/comments\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    addComment,\r\n    deleteComment,\r\n    getComments,\r\n    getCommentsLoadingStatus,\r\n    loadCommentsList\r\n} from \"../../store/comments\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { getCurrentUserId } from \"../../store/users\";\r\n\r\nconst Comments = () => {\r\n    const { userId } = useParams();\r\n    const dispatch = useDispatch();\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n    useEffect(() => {\r\n        dispatch(loadCommentsList(userId));\r\n    }, [userId]);\r\n    const isLoading = useSelector(getCommentsLoadingStatus());\r\n    // const { createComment, removeComment } = useComments();\r\n    const comments = useSelector(getComments());\r\n\r\n    const handleSubmit = (data) => {\r\n        dispatch(\r\n            addComment({\r\n                ...data,\r\n                _id: nanoid(),\r\n                pageId: userId,\r\n                created_at: Date.now(),\r\n                userId: currentUserId\r\n            })\r\n        );\r\n    };\r\n    const handleRemoveComment = (id) => {\r\n        dispatch(deleteComment(id));\r\n    };\r\n    const sortedComments = orderBy(comments, [\"created_at\"], [\"desc\"]);\r\n    return (\r\n        <>\r\n            <div className=\"card mb-2\">\r\n                {\" \"}\r\n                <div className=\"card-body \">\r\n                    <AddCommentForm onSubmit={handleSubmit} />\r\n                </div>\r\n            </div>\r\n            {sortedComments.length > 0 && (\r\n                <div className=\"card mb-3\">\r\n                    <div className=\"card-body \">\r\n                        <h2>Comments</h2>\r\n                        <hr />\r\n                        {!isLoading ? (\r\n                            <CommentsList\r\n                                comments={sortedComments}\r\n                                onRemove={handleRemoveComment}\r\n                            />\r\n                        ) : (\r\n                            \"Loading...\"\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n","import UserPage from \"./userPage\";\nexport default UserPage;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport UserCard from \"../../ui/userCard\";\r\nimport QualitiesCard from \"../../ui/qualitiesCard\";\r\nimport MeetingsCard from \"../../ui/meetingsCard\";\r\nimport Comments from \"../../ui/comments\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getUserById } from \"../../../store/users\";\r\n\r\nconst UserPage = ({ userId }) => {\r\n    const user = useSelector(getUserById(userId));\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row gutters-sm\">\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <UserCard user={user} />\r\n                        <QualitiesCard data={user.qualities} />\r\n                        <MeetingsCard value={user.completedMeetings} />\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <Comments />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <h1>Loading</h1>;\r\n    }\r\n};\r\n\r\nUserPage.propTypes = {\r\n    userId: PropTypes.string.isRequired\r\n};\r\n\r\nexport default UserPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\nconst Pagination = ({ itemsCount, pageSize, onPageChange, currentPage }) => {\r\n    const pagesCount = Math.ceil(itemsCount / pageSize);\r\n    if (pagesCount === 1) return null;\r\n    const pages = _.range(1, pagesCount + 1);\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pages.map((page) => (\r\n                    <li\r\n                        className={\r\n                            \"page-item \" +\r\n                            (page === currentPage ? \"active\" : \"\")\r\n                        }\r\n                        key={\"page_\" + page}\r\n                    >\r\n                        <button\r\n                            className=\"page-link\"\r\n                            onClick={() => {\r\n                                onPageChange(page);\r\n                            }}\r\n                        >\r\n                            {page}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\nPagination.propTypes = {\r\n    itemsCount: PropTypes.number.isRequired,\r\n    pageSize: PropTypes.number.isRequired,\r\n    currentPage: PropTypes.number.isRequired,\r\n    onPageChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GroupList = ({\n    items,\n    valueProperty,\n    contentProperty,\n    onItemSelect,\n    selectedItem\n}) => {\n    if (!Array.isArray(items)) {\n        return (\n            <ul className=\"list-group\">\n                {Object.keys(items).map((item) => (\n                    <li\n                        key={items[item][valueProperty]}\n                        className={\n                            \"list-group-item\" +\n                            (items[item] === selectedItem ? \" active\" : \"\")\n                        }\n                        onClick={() => onItemSelect(items[item])}\n                        role=\"button\"\n                    >\n                        {items[item][contentProperty]}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n    return (\n        <ul className=\"list-group\">\n            {items.map((item) => (\n                <li\n                    key={item[valueProperty]}\n                    className={\n                        \"list-group-item\" +\n                        (item === selectedItem ? \" active\" : \"\")\n                    }\n                    onClick={() => onItemSelect(item)}\n                    role=\"button\"\n                >\n                    {item[contentProperty]}\n                </li>\n            ))}\n        </ul>\n    );\n};\nGroupList.defaultProps = {\n    valueProperty: \"_id\",\n    contentProperty: \"name\"\n};\nGroupList.propTypes = {\n    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    valueProperty: PropTypes.string.isRequired,\n    contentProperty: PropTypes.string.isRequired,\n    onItemSelect: PropTypes.func,\n    selectedItem: PropTypes.object\n};\n\nexport default GroupList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst SearchStatus = ({ length }) => {\n    const renderPhrase = (number) => {\n        const lastOne = Number(number.toString().slice(-1));\n        if (number > 4 && number < 15) {\n            return \"человек тусанет\";\n        }\n        if (lastOne === 1) return \"человек тусанет\";\n        if ([2, 3, 4].indexOf(lastOne) >= 0) return \"человека тусанут\";\n        return \"человек тусанет\";\n    };\n    return (\n        <h2>\n            <span\n                className={\"badge \" + (length > 0 ? \"bg-primary\" : \"bg-danger\")}\n            >\n                {length > 0\n                    ? `${length + \" \" + renderPhrase(length)}   с тобой сегодня`\n                    : \"Никто с тобой не тусанет\"}\n            </span>\n        </h2>\n    );\n};\nSearchStatus.propTypes = {\n    length: PropTypes.number\n};\n\nexport default SearchStatus;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst BookMark = ({ status, ...rest }) => {\n    return (\n        <button {...rest}>\n            <i className={\"bi bi-bookmark\" + (status ? \"-heart-fill\" : \"\")}></i>\n        </button>\n    );\n};\nBookMark.propTypes = {\n    status: PropTypes.bool\n};\n\nexport default BookMark;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nconst TableBody = ({ data, columns }) => {\n    const renderContent = (item, column) => {\n        if (columns[column].component) {\n            const component = columns[column].component;\n            if (typeof component === \"function\") {\n                return component(item);\n            }\n            return component;\n        }\n        return _.get(item, columns[column].path);\n    };\n    return (\n        <tbody>\n            {data.map((item) => (\n                <tr key={item._id}>\n                    {Object.keys(columns).map((column) => (\n                        <td key={column}>{renderContent(item, column)}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    );\n};\n\nTableBody.propTypes = {\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst TableHeader = ({ onSort, selectedSort, columns }) => {\n    const handleSort = (item) => {\n        if (selectedSort.path === item) {\n            onSort({\n                ...selectedSort,\n                order: selectedSort.order === \"asc\" ? \"desc\" : \"asc\"\n            });\n        } else {\n            onSort({ path: item, order: \"asc\" });\n        }\n    };\n    const rendeSortArrow = (selectedSort, currentPath) => {\n        if (selectedSort.path === currentPath) {\n            if (selectedSort.order === \"asc\") {\n                return <i className=\"bi bi-caret-down-fill\"></i>;\n            } else {\n                return <i className=\"bi bi-caret-up-fill\"></i>;\n            }\n        }\n        return null;\n    };\n\n    return (\n        <thead>\n            <tr>\n                {Object.keys(columns).map((column) => (\n                    <th\n                        key={column}\n                        onClick={\n                            columns[column].path\n                                ? () => handleSort(columns[column].path)\n                                : undefined\n                        }\n                        {...{ role: columns[column].path && \"button\" }}\n                        scope=\"col\"\n                    >\n                        {columns[column].name}{\" \"}\n                        {rendeSortArrow(selectedSort, columns[column].path)}\n                    </th>\n                ))}\n            </tr>\n        </thead>\n    );\n};\nTableHeader.propTypes = {\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableHeader;\n","import Table from \"./table\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nexport default Table;\n\nexport { TableBody, TableHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nconst Table = ({ onSort, selectedSort, columns, data, children }) => {\n    return (\n        <table className=\"table\">\n            {children || (\n                <>\n                    <TableHeader {...{ onSort, selectedSort, columns }} />\n                    <TableBody {...{ columns, data }} />\n                </>\n            )}\n        </table>\n    );\n};\nTable.propTypes = {\n    onSort: PropTypes.func,\n    selectedSort: PropTypes.object,\n    columns: PropTypes.object,\n    data: PropTypes.array,\n    children: PropTypes.array\n};\n\nexport default Table;\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    getProfessionById,\r\n    getProfessionsLoadingStatus\r\n} from \"../../store/professions\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nconst Profession = ({ id }) => {\r\n    const isLoading = useSelector(getProfessionsLoadingStatus());\r\n    const prof = useSelector(getProfessionById(id));\r\n\r\n    if (!isLoading) {\r\n        return <p>{prof.name}</p>;\r\n    } else return \"loading ...\";\r\n};\r\nProfession.propTypes = {\r\n    id: PropTypes.string\r\n};\r\nexport default Profession;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport BookMark from \"../common/bookmark\";\nimport Qualities from \"./qualities\";\nimport Table from \"../common/table\";\nimport { Link } from \"react-router-dom\";\nimport Profession from \"./profession\";\n\nconst UserTable = ({\n    users,\n    onSort,\n    selectedSort,\n    onToggleBookMark,\n    currentUserBookmarks,\n    ...rest\n}) => {\n    const columns = {\n        name: {\n            path: \"name\",\n            name: \"Имя\",\n            component: (user) => (\n                <Link to={`/users/${user._id}`}>{user.name}</Link>\n            )\n        },\n        qualities: {\n            name: \"Качества\",\n            component: (user) => <Qualities qualities={user.qualities} />\n        },\n        professions: {\n            name: \"Профессия\",\n            component: (user) => <Profession id={user.profession} />\n        },\n        completedMeetings: {\n            path: \"completedMeetings\",\n            name: \"Встретился, раз\"\n        },\n        rate: { path: \"rate\", name: \"Оценка\" },\n        bookmark: {\n            path: \"bookmark\",\n            name: \"Избранное\",\n            component: (user) => (\n                <BookMark\n                    status={currentUserBookmarks.includes(user._id)}\n                    onClick={() => onToggleBookMark(user._id)}\n                />\n            )\n        }\n    };\n    return (\n        <Table\n            onSort={onSort}\n            selectedSort={selectedSort}\n            columns={columns}\n            data={users}\n        />\n    );\n};\n\nUserTable.propTypes = {\n    users: PropTypes.array.isRequired,\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    onToggleBookMark: PropTypes.func.isRequired,\n    currentUserBookmarks: PropTypes.array.isRequired\n};\n\nexport default UserTable;\n","import UsersListPage from \"./usersListPage\";\nexport default UsersListPage;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { paginate } from \"../../../utils/paginate\";\nimport Pagination from \"../../common/pagination\";\nimport GroupList from \"../../common/groupList\";\nimport SearchStatus from \"../../ui/searchStatus\";\nimport UserTable from \"../../ui/usersTable\";\nimport _ from \"lodash\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCurrentUserData,\n    getCurrentUserId,\n    getUsersList,\n    updateBookmarks\n} from \"../../../store/users\";\nconst UsersListPage = () => {\n    const users = useSelector(getUsersList());\n    const currentUserId = useSelector(getCurrentUserId());\n    const user = useSelector(getCurrentUserData());\n    const currentUserBookmarks = user.bookmarks || [];\n    const dispatch = useDispatch();\n    const professions = useSelector(getProfessions());\n    const professionsLoading = useSelector(getProfessionsLoadingStatus());\n    const [currentPage, setCurrentPage] = useState(1);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [selectedProf, setSelectedProf] = useState();\n    const [sortBy, setSortBy] = useState({ path: \"name\", order: \"asc\" });\n    const pageSize = 6;\n\n    const handleToggleBookMark = (id) => {\n        if (!currentUserBookmarks.includes(id)) {\n            dispatch(\n                updateBookmarks({\n                    _id: user._id,\n                    bookmarks: [...currentUserBookmarks, id]\n                })\n            );\n        } else {\n            dispatch(\n                updateBookmarks({\n                    _id: user._id,\n                    bookmarks: currentUserBookmarks.filter((b) => b !== id)\n                })\n            );\n        }\n    };\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [selectedProf, searchQuery]);\n\n    const handleProfessionSelect = (item) => {\n        if (searchQuery !== \"\") setSearchQuery(\"\");\n        setSelectedProf(item);\n    };\n    const handleSearchQuery = ({ target }) => {\n        setSelectedProf(undefined);\n        setSearchQuery(target.value);\n    };\n\n    const handlePageChange = (pageIndex) => {\n        setCurrentPage(pageIndex);\n    };\n    const handleSort = (item) => {\n        setSortBy(item);\n    };\n\n    function filterUsers(data) {\n        const filteredUsers = searchQuery\n            ? data.filter(\n                  (user) =>\n                      user.name\n                          .toLowerCase()\n                          .indexOf(searchQuery.toLowerCase()) !== -1\n              )\n            : selectedProf\n            ? data.filter((user) => user.profession === selectedProf._id)\n            : data;\n        return filteredUsers.filter((u) => u._id !== currentUserId);\n    }\n    const filteredUsers = filterUsers(users);\n    const count = filteredUsers.length;\n    const sortedUsers = _.orderBy(filteredUsers, [sortBy.path], [sortBy.order]);\n    const usersCrop = paginate(sortedUsers, currentPage, pageSize);\n    const clearFilter = () => {\n        setSelectedProf();\n    };\n\n    return (\n        <div className=\"d-flex\">\n            {professions && !professionsLoading && (\n                <div className=\"d-flex flex-column flex-shrink-0 p-3\">\n                    <GroupList\n                        selectedItem={selectedProf}\n                        items={professions}\n                        onItemSelect={handleProfessionSelect}\n                    />\n                    <button\n                        className=\"btn btn-secondary mt-2\"\n                        onClick={clearFilter}\n                    >\n                        Очиститть\n                    </button>\n                </div>\n            )}\n            <div className=\"d-flex flex-column\">\n                <SearchStatus length={count} />\n                <input\n                    type=\"text\"\n                    name=\"searchQuery\"\n                    placeholder=\"Search...\"\n                    onChange={handleSearchQuery}\n                    value={searchQuery}\n                />\n                {count > 0 && (\n                    <UserTable\n                        users={usersCrop}\n                        onSort={handleSort}\n                        selectedSort={sortBy}\n                        currentUserBookmarks={currentUserBookmarks}\n                        onToggleBookMark={handleToggleBookMark}\n                    />\n                )}\n                <div className=\"d-flex justify-content-center\">\n                    <Pagination\n                        itemsCount={count}\n                        pageSize={pageSize}\n                        currentPage={currentPage}\n                        onPageChange={handlePageChange}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nUsersListPage.propTypes = {\n    users: PropTypes.array\n};\n\nexport default UsersListPage;\n","import _ from \"lodash\";\n\nexport function paginate(items, pageNumber, pageSize) {\n    const startIndex = (pageNumber - 1) * pageSize;\n    return _(items).slice(startIndex).take(pageSize).value();\n}\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDataStatus, loadUsersList } from \"../../../store/users\";\r\nimport PropTypes from \"prop-types\";\r\nfunction UsersLoader({ children }) {\r\n    const dataStatus = useSelector(getDataStatus);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (!dataStatus) {\r\n            dispatch(loadUsersList());\r\n        }\r\n    }, []);\r\n    if (!dataStatus) return \"Loading...\";\r\n\r\n    return children;\r\n}\r\nUsersLoader.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\nexport default UsersLoader;\r\n","import React from \"react\";\r\nimport { useParams, Redirect } from \"react-router-dom\";\r\nimport EditUserPage from \"../components/page/editUserPage\";\r\nimport UserPage from \"../components/page/userPage\";\r\nimport UsersListPage from \"../components/page/usersListPage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCurrentUserId } from \"../store/users\";\r\nimport UsersLoader from \"../components/ui/hoc/usersLoader\";\r\nconst Users = () => {\r\n    const params = useParams();\r\n    const { userId, edit } = params;\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n\r\n    return (\r\n        <>\r\n            <UsersLoader>\r\n                {userId ? (\r\n                    edit ? (\r\n                        userId === currentUserId ? (\r\n                            <EditUserPage />\r\n                        ) : (\r\n                            <Redirect to={`/users/${currentUserId}/edit`} />\r\n                        )\r\n                    ) : (\r\n                        <UserPage userId={userId} />\r\n                    )\r\n                ) : (\r\n                    <UsersListPage />\r\n                )}\r\n            </UsersLoader>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CheckBoxField = ({ name, value, onChange, children, error }) => {\n    const handleChange = () => {\n        onChange({ name: name, value: !value });\n    };\n    const getInputClasses = () => {\n        return \"form-check-input\" + (error ? \" is-invalid\" : \"\");\n    };\n    return (\n        <div className=\"form-check mb-4\">\n            <input\n                className={getInputClasses()}\n                type=\"checkbox\"\n                value=\"\"\n                id={name}\n                onChange={handleChange}\n                checked={value}\n            />\n            <label className=\"form-check-label \" htmlFor={name}>\n                {children}\n            </label>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\nCheckBoxField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.bool,\n    onChange: PropTypes.func,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n    error: PropTypes.string\n};\n\nexport default CheckBoxField;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAuthErrors, login } from \"../../store/users\";\n\nconst LoginForm = () => {\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        stayOn: false\n    });\n    const loginError = useSelector(getAuthErrors());\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [errors, setErrors] = useState({});\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязателкн для заполнения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const redirect = history.location.state\n            ? history.location.state.from.pathname\n            : \"/\";\n        dispatch(login({ payload: data, redirect }));\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <CheckBoxField\n                value={data.stayOn}\n                onChange={handleChange}\n                name=\"stayOn\"\n            >\n                Оставаться в системе\n            </CheckBoxField>\n            {loginError && <p className=\"text-danger\">{loginError}</p>}\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Отправить\n            </button>\n        </form>\n    );\n};\n\nexport default LoginForm;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport SelectField from \"../common/form/selectField\";\nimport RadioField from \"../common/form/radio.Field\";\nimport MultiSelectField from \"../common/form/multiSelectField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getQualities } from \"../../store/qualities\";\nimport { getProfessions } from \"../../store/professions\";\nimport { signUp } from \"../../store/users\";\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        profession: \"\",\n        sex: \"male\",\n        name: \"\",\n        qualities: [],\n        licence: false\n    });\n\n    const qualities = useSelector(getQualities());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n    // const professionLoading = useSelector(getProfessionsLoadingStatus());\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Имя обязательно для заполнения\"\n            },\n            min: {\n                message: \"Имя должено состаять миниму из 3 символов\",\n                value: 3\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязательна для заполнения\"\n            },\n            isCapitalSymbol: {\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\n            },\n            isContainDigit: {\n                message: \"Пароль должен содержать хотя бы одно число\"\n            },\n            min: {\n                message: \"Пароль должен состаять миниму из 8 символов\",\n                value: 8\n            }\n        },\n        profession: {\n            isRequired: {\n                message: \"Обязательно выберите вашу профессию\"\n            }\n        },\n        licence: {\n            isRequired: {\n                message:\n                    \"Вы не можете использовать наш сервис без подтреврждения лицензионного соглашения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const newData = {\n            ...data,\n            qualities: data.qualities.map((q) => q.value)\n        };\n        dispatch(signUp(newData));\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Имя\"\n                name=\"name\"\n                value={data.name}\n                onChange={handleChange}\n                error={errors.name}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <SelectField\n                label=\"Выбери свою профессию\"\n                defaultOption=\"Выберите...\"\n                name=\"profession\"\n                options={professionsList}\n                onChange={handleChange}\n                value={data.profession}\n                error={errors.profession}\n            />\n            <RadioField\n                options={[\n                    { name: \"Male\", value: \"male\" },\n                    { name: \"Female\", value: \"female\" },\n                    { name: \"Other\", value: \"other\" }\n                ]}\n                value={data.sex}\n                name=\"sex\"\n                onChange={handleChange}\n                label=\"Выберите ваш пол\"\n            />\n            <MultiSelectField\n                options={qualitiesList}\n                onChange={handleChange}\n                name=\"qualities\"\n                label=\"Выберите ваши качества\"\n            />\n            <CheckBoxField\n                value={data.licence}\n                onChange={handleChange}\n                name=\"licence\"\n                error={errors.licence}\n            >\n                Подтвердить <a>лицензионное соглашение</a>\n            </CheckBoxField>\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Отправить\n            </button>\n        </form>\n    );\n};\n\nexport default RegisterForm;\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport LoginForm from \"../components/ui/loginForm\";\nimport RegisterForm from \"../components/ui/registerForm\";\n\nconst Login = () => {\n    const { type } = useParams();\n    const [formType, setFormType] = useState(\n        type === \"register\" ? type : \"login\"\n    );\n    const toggleFormType = (params) => {\n        setFormType((prevState) =>\n            prevState === \"register\" ? \"login\" : \"register\"\n        );\n    };\n\n    return (\n        <div className=\"container mt-5\">\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {formType === \"register\" ? (\n                        <>\n                            <h3 className=\"mb-4\">Регистрация</h3>\n                            <RegisterForm />\n                            <p>\n                                Есть аккаунт?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Войти\n                                </a>\n                            </p>\n                        </>\n                    ) : (\n                        <>\n                            <h3 className=\"mb-4\">Вход</h3>\n                            <LoginForm />\n                            <p>\n                                Нет аккаунта?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Регистрация\n                                </a>\n                            </p>\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Login;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Main = () => {\n    return (\n        <div className=\"card text-center mt-5\">\n            <div className=\"card-body\">\n                <h1 className=\"card-title\">Поиск друзей в один клик!</h1>\n                <p className=\"card-text\">\n                    В нашем приложении ты без труда найдешь себе компанию по\n                    интересам.\n                </p>\n                <Link to={\"/login\"} className=\"btn btn-primary\">\n                    Войти\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserData } from \"../../store/users\";\nconst NavProfile = () => {\n    const currentUser = useSelector(getCurrentUserData());\n    const [isOpen, setOpen] = useState(false);\n    const toggleMenu = () => {\n        setOpen((prevState) => !prevState);\n    };\n    if (!currentUser) return \"Loading...\";\n    return (\n        <div className=\"dropdown\" onClick={toggleMenu}>\n            <div className=\"btn dropdown-toggle d-flex align-items-center\">\n                <div className=\"me-2\">{currentUser.name}</div>\n                <img\n                    src={currentUser.image}\n                    alt=\"\"\n                    height=\"40\"\n                    className=\"img-responsive rounded-circle\"\n                />\n            </div>\n            <div className={\"w-100 dropdown-menu\" + (isOpen ? \" show\" : \"\")}>\n                <Link\n                    to={`/users/${currentUser._id}`}\n                    className=\"dropdown-item\"\n                >\n                    Профиль\n                </Link>\n                <Link to=\"/logout\" className=\"dropdown-item\">\n                    Выйти\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default NavProfile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NavProfile from \"./navProfile\";\nimport { useSelector } from \"react-redux\";\nimport { getIsLoggedIn } from \"../../store/users\";\nconst NavBar = () => {\n    const isLoggedIn = useSelector(getIsLoggedIn());\n    return (\n        <nav className=\"navbar bg-light mb-3\">\n            <div className=\"container-fluid\">\n                <ul className=\"nav\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\n                            Главная\n                        </Link>\n                    </li>\n                    {isLoggedIn && (\n                        <li className=\"nav-item\">\n                            <Link\n                                className=\"nav-link \"\n                                aria-current=\"page\"\n                                to=\"/users\"\n                            >\n                                Пользователи\n                            </Link>\n                        </li>\n                    )}\n                </ul>\n                <div className=\"d-flex\">\n                    {isLoggedIn ? (\n                        <NavProfile />\n                    ) : (\n                        <Link\n                            className=\"nav-link \"\n                            aria-current=\"page\"\n                            to=\"/login\"\n                        >\n                            Войти\n                        </Link>\n                    )}\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default NavBar;\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getIsLoggedIn } from \"../../store/users\";\r\nconst ProtectedRoute = ({ component: Component, children, ...rest }) => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (!isLoggedIn) {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: {\r\n                                    from: props.location\r\n                                }\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                return Component ? <Component {...props} /> : children;\r\n            }}\r\n        />\r\n    );\r\n};\r\nProtectedRoute.propTypes = {\r\n    component: PropTypes.func,\r\n    location: PropTypes.object,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { logOut } from \"../store/users\";\nconst LogOut = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(logOut());\n    }, []);\n    return <h1>Loading</h1>;\n};\n\nexport default LogOut;\n","import { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getIsLoggedIn,\n    getUsersLoadingStatus,\n    loadUsersList\n} from \"../../../store/users\";\nimport { loadQualitiesList } from \"../../../store/qualities\";\nimport { loadProfessionsList } from \"../../../store/professions\";\nfunction AppLoader({ children }) {\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector(getIsLoggedIn());\n    const usersStatusLoading = useSelector(getUsersLoadingStatus());\n    useEffect(() => {\n        dispatch(loadQualitiesList());\n        dispatch(loadProfessionsList());\n        if (isLoggedIn) {\n            dispatch(loadUsersList());\n        }\n    }, [isLoggedIn]);\n    if (usersStatusLoading) return \"Loading...\";\n    return children;\n}\n\nAppLoader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\nexport default AppLoader;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Users from \"./layouts/users\";\nimport Login from \"./layouts/login\";\nimport Main from \"./layouts/main\";\nimport NavBar from \"./components/ui/navBar\";\nimport { ToastContainer } from \"react-toastify\";\nimport ProtectedRoute from \"./components/common/protectedRoute\";\nimport LogOut from \"./layouts/logOut\";\nimport AppLoader from \"./components/ui/hoc/appLoader\";\n\nfunction App() {\n    return (\n        <div>\n            <AppLoader>\n                <NavBar />\n\n                <Switch>\n                    <ProtectedRoute\n                        path=\"/users/:userId?/:edit?\"\n                        component={Users}\n                    />\n                    <Route path=\"/login/:type?\" component={Login} />\n                    <Route path=\"/logout\" component={LogOut} />\n                    <Route path=\"/\" exact component={Main} />\n                    <Redirect to=\"/\" />\n                </Switch>\n            </AppLoader>\n            <ToastContainer />\n        </div>\n    );\n}\n\nexport default App;\n","import qualitiesReducer from \"./qualities\";\r\nimport professionsReducer from \"./professions\";\r\nimport usersReducer from \"./users\";\r\nimport commentsReducer from \"./comments\";\r\n\r\nconst { combineReducers, configureStore } = require(\"@reduxjs/toolkit\");\r\n\r\nconst rootReducer = combineReducers({\r\n    qualities: qualitiesReducer,\r\n    professions: professionsReducer,\r\n    users: usersReducer,\r\n    comments: commentsReducer\r\n});\r\n\r\nexport function createStore() {\r\n    return configureStore({\r\n        reducer: rootReducer\r\n    });\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./app/App\";\nimport { Router } from \"react-router-dom\";\nimport { createStore } from \"./app/store/createStore\";\nimport { Provider } from \"react-redux\";\nimport history from \"./app/utils/history\";\n\nconst store = createStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Router history={history}>\n                <App />\n            </Router>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}